{
  "item": [
    {
      "id": "a7236d35-2282-4558-afb8-957af7190480",
      "name": "accounts",
      "item": [
        {
          "id": "458c6ea0-7245-420e-b5b8-12c4d173cb89",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "95267666-0269-4333-a08b-250947af0d9c",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "5fcd13b5-5c9a-4932-8ed5-5d4749c46c4f",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "90780d08-bfc5-4b80-ac83-c45b3bdcf74c",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "085c5a5a-3539-4c99-83d1-b0ca78fbb5ea",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f6e002c5-6b11-489f-a395-ec1de3b9efaf",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "8d30503c-ab4f-484b-9011-9aa57a890c63",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "2f0ccbec-3c25-4ebd-96cc-a28099592794",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"72ecb66c-49f0-83c6-7150-853c4ef0753d:c985d220-a291-836d-8055-b1ca55bddba6\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "09ca8caf-038a-49ed-bf2c-e737595562ef",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `token` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"token\")){\n          if(responseData.token!=null){\n            pm.expect(typeof _.get(responseData, \"token\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "756cd4af-bdff-4806-aba6-bd88d77f09ca",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "4a2a3a89-7222-4608-a64c-c7d74b65e925",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "fd8290e7-9845-4453-b7f1-4e4b5b87ec34",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "48b88d79-10fb-4bed-b648-d5ed24bcdad1",
      "name": "me",
      "item": [
        {
          "id": "34b1b675-1dda-49a4-b204-7c950e6e44f9",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f37ca2a3-e99b-403a-926d-1241a1608551",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2009-03-28T08:20:17.550Z\",\n  \"did\": \"consequat laborum elit\",\n  \"email\": \"<email>\",\n  \"id\": \"f1c5d0d4-4d09-6404-430d-d52654766573\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"L}' . L'pL{p}{}.}}{p{{}{-..}{ L'}L}L\",\n  \"settings\": {\n    \"irure_7\": -87679606.02083197,\n    \"nostrud_d\": -67613558\n  },\n  \"updatedAt\": \"2006-02-22T03:23:57.907Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "314c554b-decc-459b-a079-938a39ae87ab",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "cb1a93ff-fb9e-4967-a13d-346ce71fba18",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `did` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"did\")){\n          if(responseData.did!=null){\n            pm.expect(typeof _.get(responseData, \"did\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `image` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"image\")){\n          if(responseData.image!=null){\n            pm.expect(typeof _.get(responseData, \"image\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `settings` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"settings\")){\n          if(responseData.settings!=null){\n            pm.expect(typeof _.get(responseData, \"settings\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a60f9d8f-3c41-4991-9942-ad81a805edc0",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"eiusmodb64\": 58124947,\n        \"reprehenderit_9e\": 21677773.090308204,\n        \"nulla__82\": false,\n        \"dolor1\": true\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "1d69c9a3-9410-413e-9058-2784279d7079",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"sunt_9\": -35534219.54066942\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2009-03-28T08:20:17.550Z\",\n  \"did\": \"consequat laborum elit\",\n  \"email\": \"<email>\",\n  \"id\": \"f1c5d0d4-4d09-6404-430d-d52654766573\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"L}' . L'pL{p}{}.}}{p{{}{-..}{ L'}L}L\",\n  \"settings\": {\n    \"irure_7\": -87679606.02083197,\n    \"nostrud_d\": -67613558\n  },\n  \"updatedAt\": \"2006-02-22T03:23:57.907Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4a7c8b29-3930-4cf6-9f9b-e18de72bd751",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"sunt_9\": -35534219.54066942\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "77499138-e7b2-4e2d-a62b-fd14074db741",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"sunt_9\": -35534219.54066942\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `did` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"did\")){\n          if(responseData.did!=null){\n            pm.expect(typeof _.get(responseData, \"did\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `image` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"image\")){\n          if(responseData.image!=null){\n            pm.expect(typeof _.get(responseData, \"image\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `settings` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"settings\")){\n          if(responseData.settings!=null){\n            pm.expect(typeof _.get(responseData, \"settings\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "c628c2f7-88d2-4b40-8b93-df4eb69fa50f",
      "name": "credentials",
      "item": [
        {
          "id": "bf8e7582-60f1-44b7-acad-03dad9b4dd42",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "4e698b46-518a-4457-aa1c-d74dd0bbf846",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1995-02-22T10:40:55.425Z\",\n      \"credential\": \"Excepteur qui aliqua incididunt\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:6050a86f-170c-0266-2edc-841ae0e870cb\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"1971-12-29T09:23:30.208Z\"\n    },\n    {\n      \"createdAt\": \"1950-07-28T13:23:35.170Z\",\n      \"credential\": \"in in veniam sunt\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:dcd03156-84db-e6de-c09f-eabe56bfcf78\",\n      \"status\": \"active\",\n      \"statusUpdatedAt\": \"1948-05-28T22:38:02.856Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1279a1b8-d595-40f6-8ccb-1f90f459025d",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a8166a11-f5ab-4e0e-988e-3d59c6d446e0",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `credentials` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"credentials\")){\n            if(responseData.credentials!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"credentials\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `credentials` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"credentials\");  \n          let credentialsArray = _.get(pm.response.json(), \"credentials\", \"\");  \n          for (let i = 0; i < credentialsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'credentials' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().credentials[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'format' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"format\")){\n          if(pm.response.json().credentials[i].format != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].format`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"credentials\", \"\")).to.be.oneOf(jwt_vc_json,jwt_vc_json-ld,ldp_vc);\n\n      pm.test(`${i} element of array 'credentials' has 'credential' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"credential\")){\n          if(pm.response.json().credentials[i].credential != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].credential`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'status' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"status\")){\n          if(pm.response.json().credentials[i].status != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].status`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"credentials\", \"\")).to.be.oneOf(active,suspended,revoked,expired,pending);\n\n      pm.test(`${i} element of array 'credentials' has 'statusUpdatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"statusUpdatedAt\")){\n          if(pm.response.json().credentials[i].statusUpdatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].statusUpdatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().credentials[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f6da550e-7dc9-4ca5-a3c5-bf3a53372949",
          "name": "{id}",
          "item": [
            {
              "id": "7859bb63-dbaf-48f2-9cf4-9a4c3eeeaf8d",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "08d91630-822e-4c74-a3f5-4c424d1f9d17",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2015-06-27T18:16:26.566Z\",\n  \"credential\": \"enim esse ex\",\n  \"format\": \"jwt_vc_json\",\n  \"id\": \"urn:uuid:d8bd2036-a0f7-5648-0a17-d5b9711e1566\",\n  \"status\": \"suspended\",\n  \"statusUpdatedAt\": \"1994-07-16T19:12:38.667Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "69a53505-5a98-47c7-86ba-9b70a8bed532",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "1518cbac-30a4-4513-9450-352cf119af90",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `credentials` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"credentials\")){\n            if(responseData.credentials!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"credentials\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `credentials` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"credentials\");  \n          let credentialsArray = _.get(pm.response.json(), \"credentials\", \"\");  \n          for (let i = 0; i < credentialsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'credentials' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().credentials[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'format' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"format\")){\n          if(pm.response.json().credentials[i].format != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].format`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"credentials\", \"\")).to.be.oneOf(jwt_vc_json,jwt_vc_json-ld,ldp_vc);\n\n      pm.test(`${i} element of array 'credentials' has 'credential' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"credential\")){\n          if(pm.response.json().credentials[i].credential != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].credential`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'status' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"status\")){\n          if(pm.response.json().credentials[i].status != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].status`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"credentials\", \"\")).to.be.oneOf(active,suspended,revoked,expired,pending);\n\n      pm.test(`${i} element of array 'credentials' has 'statusUpdatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"statusUpdatedAt\")){\n          if(pm.response.json().credentials[i].statusUpdatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].statusUpdatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'credentials' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().credentials[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().credentials[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ccead193-6cdc-4913-89aa-9a678a68f207",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "711ee750-0a69-49e2-965a-71b3a679e066",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "0f0dbfa9-1470-40ed-a1eb-eeff6d5665c4",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "55ff9ded-d0a9-4803-b328-9a24176d3071",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "d517dd1e-373e-4c22-8342-a97846a00911",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "ee6215f9-c9df-45c8-acbe-4ab469e398cd",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:07a109cd-6dbc-a1e9-4698-f9d3fb47fce7\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"L.}-L{{-p.L} .-L -'\"\n      },\n      \"createdAt\": \"1965-10-13T05:49:10.655Z\",\n      \"id\": \"urn:uuid:c9ea3d8d-3d0a-2306-6000-7200847d4b9e\",\n      \"token\": \"acc69fd2-176f-928e-c2a3-fe0cee9587e0:5e165226-d4ab-5051-d981-edf2d539be3e\",\n      \"updatedAt\": \"1981-07-24T01:35:45.635Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:3c771c52-9961-e433-c59b-704e579a1ca9\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"}{- - '}{-}L{ {.L.L{ -{'.pp{ L-''-}{.'''p}.L {'L'.  L.p.-}..}. -'Lp-{p ''-\"\n      },\n      \"createdAt\": \"1998-02-22T14:18:56.317Z\",\n      \"id\": \"urn:uuid:b1eee672-f3c0-7b55-868f-a8c423501e9a\",\n      \"token\": \"48b4f744-6082-838a-a3e4-a1c53a96eb80:16f62baf-d492-38c2-82be-23a2491082a6\",\n      \"updatedAt\": \"1985-06-21T16:09:54.403Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "eec444d3-3ff6-4c69-97dc-75049ead5e73",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `grants` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"grants\")){\n            if(responseData.grants!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"grants\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `grants` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"grants\");  \n          let grantsArray = _.get(pm.response.json(), \"grants\", \"\");  \n          for (let i = 0; i < grantsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'grants' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().grants[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().grants[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'grants' has 'token' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().grants[i]).to.have.nested.property(\"token\")){\n          if(pm.response.json().grants[i].token != null){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${i}].token`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'grants' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().grants[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().grants[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'grants' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().grants[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().grants[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'grants' has 'account' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().grants[i]).to.have.nested.property(\"account\")){\n          if(pm.response.json().grants[i].account != null){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${i}].account`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "418ebc5b-4eb3-4d59-90c8-874ef10d2151",
      "name": "authorizations",
      "item": [
        {
          "id": "8335e7e1-6d94-49fa-aa31-013558899f6c",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "8392366a-56c5-4cbe-bc96-36dd9af8b343",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"1962-12-17T20:44:14.022Z\",\n      \"email\": \"<email>\",\n      \"id\": \"256cc43d-5292-ac3f-51fd-92ecc98390af\",\n      \"name\": \"{L'}} 'pL-'pp' '. .'}-'}'}p -} .-{' {.p{-}p}.{\",\n      \"updatedAt\": \"1992-06-13T00:04:15.026Z\"\n    },\n    {\n      \"createdAt\": \"2009-11-09T20:51:20.935Z\",\n      \"email\": \"<email>\",\n      \"id\": \"dc970e31-7d53-d163-41bf-6d6cdd05d473\",\n      \"name\": \"}.pp- {-- }p--'{{.L{pp}LL}..}--{'pLL  {  {}}p.L{'pp  {{'--.p .{pLp}p{' }'\",\n      \"updatedAt\": \"1969-06-01T02:21:30.829Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2de7f98a-54ad-4251-b8d7-cebd680f2f8c",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c7c7fc34-459e-4460-81cd-e93931b77b20",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `authorizations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"authorizations\")){\n            if(responseData.authorizations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"authorizations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `authorizations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"authorizations\");  \n          let authorizationsArray = _.get(pm.response.json(), \"authorizations\", \"\");  \n          for (let i = 0; i < authorizationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'authorizations' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().authorizations[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().authorizations[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'authorizations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().authorizations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().authorizations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'authorizations' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().authorizations[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().authorizations[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'authorizations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().authorizations[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().authorizations[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'authorizations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().authorizations[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().authorizations[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "11bad8a9-1d26-4db8-9d69-e820f0aef3bf",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "4e8f721b-8e3c-4670-a237-0de35c3a54ba",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1963-10-12T12:30:02.629Z\",\n  \"email\": \"<email>\",\n  \"id\": \"fa8a1b7e-72ea-5aab-53a6-7b03bd7fdfb7\",\n  \"name\": \" ''p.L}{'-  '{}p'p.'L-''p.}..{}pp.{ }'p .{p{''-{{.} -LL'LLpppp  } {{p{''\",\n  \"updatedAt\": \"1989-09-26T20:38:37.728Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e8d1144d-7e10-43dd-8e99-db574da19d6a",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8afe47b9-5b99-4b59-8794-6dfc129654f0",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"name\")){\n          if(responseData.name!=null){\n            pm.expect(typeof _.get(responseData, \"name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4c64b24b-df01-45cb-b750-3ed0be0c5d88",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "9a7dfcd4-d0b0-463c-aa31-3c29901bead2",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "f4857b0b-1f9c-49bf-a797-c808098825ab",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "12f2f107-5a6c-4628-9ee6-bb2bcdbba716",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "f4d5236f-8516-4628-b712-ad62186abb20",
      "name": "apikeys",
      "item": [
        {
          "id": "6192f924-7a35-483c-a0b1-4740a8e2d38a",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "1778bb14-6c7a-4975-baea-28cbeec44368",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"1949-04-14T16:36:44.447Z\",\n      \"id\": \"urn:uuid:7aa318f5-2686-907e-8b1e-177f81d2d347\"\n    },\n    {\n      \"createdAt\": \"1968-04-27T10:07:07.785Z\",\n      \"id\": \"urn:uuid:7769f8ef-f828-095d-28c3-2ec12d3466ac\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3735c8a2-a6b0-4a4a-a6bd-8e18e8bca538",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b3695184-4c8b-4c07-aa50-a335f0cd4f9a",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `apikeys` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"apikeys\")){\n            if(responseData.apikeys!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"apikeys\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `apikeys` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"apikeys\");  \n          let apikeysArray = _.get(pm.response.json(), \"apikeys\", \"\");  \n          for (let i = 0; i < apikeysArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'apikeys' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().apikeys[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().apikeys[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'apikeys' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().apikeys[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().apikeys[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "dc92a736-a074-46b2-b570-d1cac221d4f5",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "09e17382-d36f-40ac-b321-41cbe30b9add",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2011-02-08T05:44:39.634Z\",\n  \"id\": \"1904ec9f-8cdd-4255-f7d4-d345ba797323\",\n  \"token\": \"d945692f-14f6-6392-5e83-1c8157a720ad:23ff4529-037b-6a97-6895-df15d7bc141c\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8d8459c3-ea65-4963-9700-9f0d6243a5d0",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "de2ad63b-6b3b-4129-a5bd-3859ec605adb",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `token` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"token\")){\n          if(responseData.token!=null){\n            pm.expect(typeof _.get(responseData, \"token\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d5bfbb5a-ec1a-4c49-84d7-89630bb7ccb2",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "27be5e12-bc15-4f4f-a8ab-3956d076f2f2",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "2f664842-f513-4162-8b37-5b8963fc5f85",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "879cdb80-07c5-41f4-acee-05d4e8f5d7fb",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "299c9a49-096a-4ad6-bf46-969e8c0d3566",
      "name": "recipients",
      "item": [
        {
          "id": "af5c01a8-358a-4140-b30c-610d68c2cdd6",
          "name": "branches",
          "item": [
            {
              "id": "ddb564db-5986-490b-b5c9-4f28828f13b0",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "f8237f43-02be-4b5d-b44b-4af94d6d1a52",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"935336786641\",\n      \"cocNumber\": \"01314470\",\n      \"createdAt\": \"1975-03-20T05:18:34.864Z\",\n      \"deregistrationDate\": \"2009-09-19\",\n      \"eoriNumber\": \"NL095015040\",\n      \"id\": \"11ce545a-b1ee-8f42-48d9-88ec5e49451b\",\n      \"tradeName\": \"dolor labore elit id\",\n      \"tradeNames\": [\n        \"do aliquip nulla incididunt\",\n        \"eiusmod ex dolore\"\n      ],\n      \"updatedAt\": \"1972-09-14T04:38:44.734Z\",\n      \"email\": \"e2+.Di/B}@[61.74.2.49]\",\n      \"phone\": \"ex aute cupidatat eu\"\n    },\n    {\n      \"cocBranchNumber\": \"956514499507\",\n      \"cocNumber\": \"29145975\",\n      \"createdAt\": \"1995-08-13T07:50:13.718Z\",\n      \"deregistrationDate\": \"2009-01-29\",\n      \"eoriNumber\": \"NL975811377\",\n      \"id\": \"5b724925-a492-2855-077a-2ba383362703\",\n      \"tradeName\": \"ea amet reprehenderit nulla\",\n      \"tradeNames\": [\n        \"consectetur commodo\",\n        \"Excepteur in qui\"\n      ],\n      \"updatedAt\": \"1985-02-19T11:50:30.683Z\",\n      \"email\": \"\\\"M>R@0%PS2\\\"@[252.91.5.8]\",\n      \"phone\": \"aliquip dolor\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5962d8c1-0716-4f1f-a716-9fdb6f04d197",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3814ffc7-8bf0-47a4-a0d5-f103cb6778bc",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(pm.response.json(), \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().branches[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().branches[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"phone\")){\n          if(pm.response.json().branches[i].phone != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].phone`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(pm.response.json().branches[i].cocNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(pm.response.json().branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"tradeName\")){\n          if(pm.response.json().branches[i].tradeName != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(pm.response.json().branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(pm.response.json().branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(pm.response.json().branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().branches[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().branches[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "06f47398-11af-48ad-a415-e1c9551eed70",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "fd00d568-9440-4b1f-a4be-93fb70bc0f37",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1968-10-25T05:03:39.156Z\",\n  \"deregistrationDate\": \"2005-05-10\",\n  \"eoriNumber\": \"NL994541216\",\n  \"id\": \"urn:uuid:13c07432-0dc5-b706-1934-d90e76f9a926\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"id dolor\",\n    \"comm\"\n  ],\n  \"updatedAt\": \"2006-06-20T17:35:06.179Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c9fa8fca-dfcc-400c-88d8-4e4a2ea4031a",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1968-10-25T05:03:39.156Z\",\n  \"deregistrationDate\": \"2005-05-10\",\n  \"eoriNumber\": \"NL994541216\",\n  \"id\": \"urn:uuid:13c07432-0dc5-b706-1934-d90e76f9a926\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"id dolor\",\n    \"comm\"\n  ],\n  \"updatedAt\": \"2006-06-20T17:35:06.179Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6b18eb04-28bf-4e0e-8228-25d8dd287684",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "da5d8fa1-1937-4cc8-9bea-e1d8b89d1c1d",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `tradeName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `tradeName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "c7786ef2-0254-4b24-89fc-bc73bcb29153",
              "name": "{id}",
              "item": [
                {
                  "id": "b254faa4-5150-4466-bff7-c5a623777b0b",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "e90a7698-f614-4be8-8ba3-c165b1dfdf2b",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1968-10-25T05:03:39.156Z\",\n  \"deregistrationDate\": \"2005-05-10\",\n  \"eoriNumber\": \"NL994541216\",\n  \"id\": \"urn:uuid:13c07432-0dc5-b706-1934-d90e76f9a926\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"id dolor\",\n    \"comm\"\n  ],\n  \"updatedAt\": \"2006-06-20T17:35:06.179Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "55eacfe0-a5c2-4bb3-98ff-e6dfc3a9bc23",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "b772c9c6-e84c-4156-8b51-64e62e008f63",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(pm.response.json(), \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().branches[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().branches[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"phone\")){\n          if(pm.response.json().branches[i].phone != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].phone`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(pm.response.json().branches[i].cocNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(pm.response.json().branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"tradeName\")){\n          if(pm.response.json().branches[i].tradeName != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(pm.response.json().branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(pm.response.json().branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(pm.response.json().branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().branches[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().branches[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "d8f14d89-9448-4d4c-a2d6-c0205b739593",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "c08f6c7f-7e53-4344-90c2-254c248e3afb",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "7d9048bb-6df4-487d-a210-bc6fde533ae8",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "40974b04-1631-41d5-97f4-1f9e5e724081",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "c83b27e1-7f58-4f94-afa2-a53b29954022",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "501843fb-fc7a-40de-b845-f97345ac0d8d",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1968-10-25T05:03:39.156Z\",\n  \"deregistrationDate\": \"2005-05-10\",\n  \"eoriNumber\": \"NL994541216\",\n  \"id\": \"urn:uuid:13c07432-0dc5-b706-1934-d90e76f9a926\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"id dolor\",\n    \"comm\"\n  ],\n  \"updatedAt\": \"2006-06-20T17:35:06.179Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "5813d97f-fa04-49c2-b0f2-256f7318f4bf",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "554f6ccf-9702-479d-8bf8-22dc3d42be1c",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"cocNumber\")){\n          if(responseData.cocNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"cocBranchNumber\")){\n          if(responseData.cocBranchNumber!=null){\n            pm.expect(typeof _.get(responseData, \"cocBranchNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `tradeName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"tradeName\")){\n          if(responseData.tradeName!=null){\n            pm.expect(typeof _.get(responseData, \"tradeName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `tradeNames` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"tradeNames\")){\n            if(responseData.tradeNames!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"tradeNames\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Response has the `eoriNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"eoriNumber\")){\n          if(responseData.eoriNumber!=null){\n            pm.expect(typeof _.get(responseData, \"eoriNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `deregistrationDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"deregistrationDate\")){\n          if(responseData.deregistrationDate!=null){\n            pm.expect(typeof _.get(responseData, \"deregistrationDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "23d92819-096b-4416-ae04-a4a25192ca17",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "7b7beae2-2aa0-4f56-b1c9-269bf55691fb",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "0918bfae-e6ed-4989-a038-0d54af5fc0a1",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1972-06-13T18:40:06.418Z\",\n      \"credentialUrl\": \"177xY91Xt://N\",\n      \"endDate\": \"1990-10-30\",\n      \"id\": \"urn:uuid:2297ce57-0bfc-d2bc-77f3-511a9ab05190\",\n      \"issuedAt\": \"2000-07-16T18:52:42.976Z\",\n      \"reference\": \"laborum in esse elit\",\n      \"startDate\": \"1990-07-16\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1974-09-05\",\n      \"updatedAt\": \"1986-01-08T07:05:33.070Z\"\n    },\n    {\n      \"createdAt\": \"1955-07-30T03:37:53.131Z\",\n      \"credentialUrl\": \"y:4Y7R*^n@`r\",\n      \"endDate\": \"2016-10-18\",\n      \"id\": \"35f40145-c716-975c-0810-2ac580d08845\",\n      \"issuedAt\": \"1982-06-14T19:13:44.202Z\",\n      \"reference\": \"velit Excepteur officia\",\n      \"startDate\": \"2001-07-28\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1970-09-01\",\n      \"updatedAt\": \"2002-05-28T22:20:16.005Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "be851ff1-b108-4991-b6e0-1bd34c1ce9dd",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "9d72a552-5d22-4360-bc22-e6de0b48e7f4",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `branches` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"branches\")){\n            if(responseData.branches!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"branches\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `branches` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"branches\");  \n          let branchesArray = _.get(pm.response.json(), \"branches\", \"\");  \n          for (let i = 0; i < branchesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'branches' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().branches[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().branches[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'phone' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"phone\")){\n          if(pm.response.json().branches[i].phone != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].phone`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"cocNumber\")){\n          if(pm.response.json().branches[i].cocNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].cocNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'cocBranchNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"cocBranchNumber\")){\n          if(pm.response.json().branches[i].cocBranchNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].cocBranchNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'tradeName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"tradeName\")){\n          if(pm.response.json().branches[i].tradeName != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].tradeName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'branches' has 'tradeNames' as an array`,function(){ \n          if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"tradeNames\")){\n            if(pm.response.json().branches[i].tradeNames != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${i}].tradeNames`))).to.equal(true);\n            }\n          }\n        })\n\n\n      pm.test(`${i} element of array 'branches' has 'eoriNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"eoriNumber\")){\n          if(pm.response.json().branches[i].eoriNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].eoriNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'deregistrationDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"deregistrationDate\")){\n          if(pm.response.json().branches[i].deregistrationDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].deregistrationDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().branches[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'branches' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().branches[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().branches[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "8d00b47d-627b-43b1-b429-6bb5b913db4a",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "cd016282-40e7-4308-bc55-bc2703e674ca",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1947-10-17T20:42:14.235Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"f384691c-a910-82d6-2df9-a5d8b6a4da41\",\n  \"issuedAt\": \"1980-01-09T20:27:04.586Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1985-11-04\",\n  \"updatedAt\": \"1945-07-08T13:59:07.347Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "8288d9a3-2d19-4197-b2c3-33adaa741517",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "b73a1749-627c-4a0f-9bfa-625d99e68f0f",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `reference` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `startDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"startDate\")){\n          if(responseData.startDate!=null){\n            pm.expect(typeof _.get(responseData, \"startDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `endDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"endDate\")){\n          if(responseData.endDate!=null){\n            pm.expect(typeof _.get(responseData, \"endDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `credentialUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.credentialUrl!=null){\n            pm.expect(typeof _.get(responseData, \"credentialUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `suspendedUntil` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.suspendedUntil!=null){\n            pm.expect(typeof _.get(responseData, \"suspendedUntil\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `issuedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"issuedAt\")){\n          if(responseData.issuedAt!=null){\n            pm.expect(typeof _.get(responseData, \"issuedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "626e298d-b50a-4b1c-9a08-8b6d9f9e154c",
          "name": "persons",
          "item": [
            {
              "id": "58a50b35-ce6e-41be-8733-a8d390362594",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "bbe061c9-885e-4f54-8455-1275478746f9",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"1984-05-09\",\n      \"birthPlace\": \"p}.},}{''L -, {.-}.,pL .p 'L,  ',p}ppp-'{Lpp ',LLL'p}{.L'..,L}L'\",\n      \"countryCode\": \"MQ\",\n      \"createdAt\": \"1944-07-22T02:45:59.310Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"''p{{pL'' p'L-L.}.L- .p }.-{'}.\",\n      \"houseNumber\": \"3\",\n      \"houseNumberPostfix\": \"FqFjx\",\n      \"id\": \"urn:uuid:6395ba55-2314-687b-7193-0f73ba72994c\",\n      \"initials\": \"AHMFIT\",\n      \"lastName\": \"'-{}}p{}{-.-{L\",\n      \"middleName\": \"}}}{\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"48062\",\n      \"reference\": \"eu ad\",\n      \"updatedAt\": \"2016-08-30T19:59:14.141Z\"\n    },\n    {\n      \"birthDate\": \"2003-10-17\",\n      \"birthPlace\": \" .p }'{'',Lp{{LL'. p-p..-,'{{.L  ,{L ,.}.Lp .L,L', {L{L.p\",\n      \"countryCode\": \"QT\",\n      \"createdAt\": \"1964-07-26T13:21:13.778Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"-'}L-}p'-}'.p}L- '{-' LL}-{- 'L}L'L.-}'{.L .L..}{\",\n      \"houseNumber\": \"7682\",\n      \"houseNumberPostfix\": \"cLoFNwc\",\n      \"id\": \"urn:uuid:e891566a-488d-149f-5b44-477c31085809\",\n      \"initials\": \"FSD\",\n      \"lastName\": \"-{}L} .-{-.'.p.pppLL{ '.{ Lp-pp}-\",\n      \"middleName\": \"{ L'--.\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"7816\",\n      \"reference\": \"sit incididunt reprehenderit deserunt\",\n      \"updatedAt\": \"1949-06-04T06:29:26.360Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "cf1a49f4-98b5-4b65-8328-314a74903569",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ef5c41d2-e647-47ba-b91f-7eaf0553d927",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(pm.response.json(), \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().persons[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"initials\")){\n          if(pm.response.json().persons[i].initials != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].initials`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().persons[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"middleName\")){\n          if(pm.response.json().persons[i].middleName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].middleName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().persons[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"birthDate\")){\n          if(pm.response.json().persons[i].birthDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].birthDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(pm.response.json().persons[i].birthPlace != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].birthPlace`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"phone\")){\n          if(pm.response.json().persons[i].phone != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].phone`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().persons[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"postalCode\")){\n          if(pm.response.json().persons[i].postalCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].postalCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(pm.response.json().persons[i].houseNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].houseNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(pm.response.json().persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"countryCode\")){\n          if(pm.response.json().persons[i].countryCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].countryCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"reference\")){\n          if(pm.response.json().persons[i].reference != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].reference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().persons[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().persons[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "89e4036c-589a-47e6-94ba-6b1759c95088",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "cf7d539e-5c04-49df-aeb7-aa3571cfd487",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1965-12-18T12:38:06.984Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:7f2ac916-3eb9-77d8-18f9-1a3a29aaa6dc\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1974-02-13T10:36:52.047Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "11cbecaf-0785-4594-aaa2-a4e7bfb5af56",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6d7fd093-2a24-4ac8-a8cb-9d75c831f04f",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `initials` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `middleName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `birthDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `birthPlace` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `postalCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `houseNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `countryCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `reference` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "3fbd9711-5774-4c28-b79f-bea8c50e8b92",
              "name": "{id}",
              "item": [
                {
                  "id": "d3df60da-d132-4dae-bb7e-e890f657a63d",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "abeb0779-a573-4f83-b440-dd1851edab5d",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1965-12-18T12:38:06.984Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:7f2ac916-3eb9-77d8-18f9-1a3a29aaa6dc\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1974-02-13T10:36:52.047Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "e949ac99-ad12-4918-bffb-25787e6b34b7",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "06aca93c-5520-4c44-9fce-dae09f4d7725",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(pm.response.json(), \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().persons[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"initials\")){\n          if(pm.response.json().persons[i].initials != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].initials`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().persons[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"middleName\")){\n          if(pm.response.json().persons[i].middleName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].middleName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().persons[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"birthDate\")){\n          if(pm.response.json().persons[i].birthDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].birthDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(pm.response.json().persons[i].birthPlace != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].birthPlace`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"phone\")){\n          if(pm.response.json().persons[i].phone != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].phone`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().persons[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"postalCode\")){\n          if(pm.response.json().persons[i].postalCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].postalCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(pm.response.json().persons[i].houseNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].houseNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(pm.response.json().persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"countryCode\")){\n          if(pm.response.json().persons[i].countryCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].countryCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"reference\")){\n          if(pm.response.json().persons[i].reference != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].reference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().persons[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().persons[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "0b683eea-a404-45c0-af17-36e07d6d76f9",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "bb2b4d84-677c-472d-93d7-403e50c2d4b5",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "062dc3b3-bf20-429e-adb0-0e258dbc5490",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "4e786a70-f1c5-49fc-bd89-5287968dc734",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "8aeba3d5-e8ca-4891-8cd2-ec4823bdc997",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "5a71654a-e33f-4e9c-a2f6-c23efbf49e7c",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1965-12-18T12:38:06.984Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:7f2ac916-3eb9-77d8-18f9-1a3a29aaa6dc\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1974-02-13T10:36:52.047Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7f6e455c-b5d7-43f2-8dde-052c874cd68d",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "05a1a465-af9e-42cb-ae29-459124a3e2ce",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `initials` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `middleName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `birthDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `birthPlace` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `postalCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `houseNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `countryCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `reference` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "924f2d39-f035-4c26-b5c0-19d5f2e3dff5",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "edd47365-083a-4da8-b142-765e68fed4c1",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "f2be3911-746a-47b1-b3a9-c4282b3a3175",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1965-08-11T01:42:52.251Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:0e597b96-7e64-119a-865f-af5551efa65f\",\n      \"issuedAt\": \"1949-11-24T21:33:38.853Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2015-04-09\",\n      \"updatedAt\": \"1998-02-03T05:31:56.252Z\"\n    },\n    {\n      \"createdAt\": \"2023-06-07T13:03:07.561Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"a1c12ebe-7c79-6471-3944-0e95bfba5ddb\",\n      \"issuedAt\": \"2020-03-28T00:29:08.361Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1998-06-20\",\n      \"updatedAt\": \"2001-05-03T20:19:03.736Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "ebd7f1a4-dcc3-4832-a3c8-55f237d9d7da",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "83766f4f-23ad-4f9d-b048-42859e87977a",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `persons` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"persons\")){\n            if(responseData.persons!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"persons\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `persons` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"persons\");  \n          let personsArray = _.get(pm.response.json(), \"persons\", \"\");  \n          for (let i = 0; i < personsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'persons' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().persons[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'initials' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"initials\")){\n          if(pm.response.json().persons[i].initials != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].initials`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().persons[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'middleName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"middleName\")){\n          if(pm.response.json().persons[i].middleName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].middleName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().persons[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'birthDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"birthDate\")){\n          if(pm.response.json().persons[i].birthDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].birthDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'birthPlace' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"birthPlace\")){\n          if(pm.response.json().persons[i].birthPlace != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].birthPlace`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'phone' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"phone\")){\n          if(pm.response.json().persons[i].phone != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].phone`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'email' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"email\")){\n          if(pm.response.json().persons[i].email != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].email`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'postalCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"postalCode\")){\n          if(pm.response.json().persons[i].postalCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].postalCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'houseNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"houseNumber\")){\n          if(pm.response.json().persons[i].houseNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].houseNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'houseNumberPostfix' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"houseNumberPostfix\")){\n          if(pm.response.json().persons[i].houseNumberPostfix != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].houseNumberPostfix`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'countryCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"countryCode\")){\n          if(pm.response.json().persons[i].countryCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].countryCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'reference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"reference\")){\n          if(pm.response.json().persons[i].reference != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].reference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().persons[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'persons' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().persons[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().persons[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "52b38b1d-17a7-4498-b6ed-02f67d0d183d",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "50e47b82-1533-4a85-a35d-83fc1c9a73c1",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1947-10-17T20:42:14.235Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"f384691c-a910-82d6-2df9-a5d8b6a4da41\",\n  \"issuedAt\": \"1980-01-09T20:27:04.586Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1985-11-04\",\n  \"updatedAt\": \"1945-07-08T13:59:07.347Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "25697d47-fc5f-4874-ae43-834d99176978",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "6a1d1058-1950-447c-baff-31294b626857",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `initials` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"initials\")){\n          if(responseData.initials!=null){\n            pm.expect(typeof _.get(responseData, \"initials\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"firstName\")){\n          if(responseData.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `middleName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"middleName\")){\n          if(responseData.middleName!=null){\n            pm.expect(typeof _.get(responseData, \"middleName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"lastName\")){\n          if(responseData.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `birthDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"birthDate\")){\n          if(responseData.birthDate!=null){\n            pm.expect(typeof _.get(responseData, \"birthDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `birthPlace` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"birthPlace\")){\n          if(responseData.birthPlace!=null){\n            pm.expect(typeof _.get(responseData, \"birthPlace\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `phone` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"phone\")){\n          if(responseData.phone!=null){\n            pm.expect(typeof _.get(responseData, \"phone\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"email\")){\n          if(responseData.email!=null){\n            pm.expect(typeof _.get(responseData, \"email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `postalCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"postalCode\")){\n          if(responseData.postalCode!=null){\n            pm.expect(typeof _.get(responseData, \"postalCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `houseNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumber\")){\n          if(responseData.houseNumber!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"houseNumberPostfix\")){\n          if(responseData.houseNumberPostfix!=null){\n            pm.expect(typeof _.get(responseData, \"houseNumberPostfix\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `countryCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"countryCode\")){\n          if(responseData.countryCode!=null){\n            pm.expect(typeof _.get(responseData, \"countryCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `reference` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "963749c4-0680-48f3-b588-2daeaae0e477",
      "name": "registrations",
      "item": [
        {
          "id": "5a5d4542-4de5-4d02-b725-75700535a0c5",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "710ea459-f1b0-4061-90fe-686e1136b85b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1992-08-12T15:57:35.528Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"f61d980f-f3b6-cc49-d7d7-2659fe928350\",\n      \"issuedAt\": \"1970-01-02T22:03:38.477Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:47697a45-3db0-ac9d-b422-f27065aa1c71\",\n        \"name\": \"}{.-L{ }p  '..{p{p{'L{}.'L'L{.'' }..p'}..\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1958-12-06\",\n      \"updatedAt\": \"2007-05-04T18:56:05.662Z\"\n    },\n    {\n      \"createdAt\": \"1958-03-26T05:52:49.936Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:738a2d16-876a-320a-1a3e-38723835dfdc\",\n      \"issuedAt\": \"1948-06-25T19:16:10.056Z\",\n      \"recipient\": {\n        \"id\": \"297d9789-9fd3-9418-ff31-4f024ced7db0\",\n        \"name\": \"Lp'p-'p{pL {.} {}.' {'' {.'pLpppp}{{.}.}pp'p} L.L}pL L.pL{ }-p}-.}}LL'.-}}}  .p - \",\n        \"type\": \"person\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2012-10-05\",\n      \"updatedAt\": \"1955-11-21T15:55:14.854Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3e8d89ad-9a09-49d1-8da9-477343833c19",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "41abe0cf-c56e-435d-8d36-458deb1ff4f0",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `registrations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"registrations\")){\n            if(responseData.registrations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"registrations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `registrations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"registrations\");  \n          let registrationsArray = _.get(pm.response.json(), \"registrations\", \"\");  \n          for (let i = 0; i < registrationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'registrations' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().registrations[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'reference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"reference\")){\n          if(pm.response.json().registrations[i].reference != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].reference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'startDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"startDate\")){\n          if(pm.response.json().registrations[i].startDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].startDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'endDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"endDate\")){\n          if(pm.response.json().registrations[i].endDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].endDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'status' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"status\")){\n          if(pm.response.json().registrations[i].status != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].status`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'credentialUrl' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"credentialUrl\")){\n          if(pm.response.json().registrations[i].credentialUrl != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].credentialUrl`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'suspendedUntil' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"suspendedUntil\")){\n          if(pm.response.json().registrations[i].suspendedUntil != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].suspendedUntil`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'issuedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"issuedAt\")){\n          if(pm.response.json().registrations[i].issuedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].issuedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().registrations[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().registrations[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'recipient' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"recipient\")){\n          if(pm.response.json().registrations[i].recipient != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].recipient`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3497d369-e96b-4a40-9f2f-7f4aee62753e",
          "name": "{id}",
          "item": [
            {
              "id": "9ff778c4-fd75-42a2-bb0f-c8bd508e3792",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "8db56739-08fe-4cb9-bc2d-d81db5cf4530",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1987-05-03T12:17:21.996Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:c700e812-c035-b1fd-edd2-285a3332e3ef\",\n  \"issuedAt\": \"1975-09-27T16:40:27.141Z\",\n  \"recipient\": {\n    \"id\": \"46825b09-7e49-e4ca-5fbe-ff1b452af4e3\",\n    \"name\": \"p} p}pL{ 'Lp' ..p{Lp..}.-. '}}p'}'{ {}L}'L}}}{}{L -{.L{Lp-{' . L-..  ' ' 'p}{.}p.''-{{.}.}p-'} \",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"2020-04-13\",\n  \"updatedAt\": \"1997-06-14T01:51:25.029Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5525f125-e50c-49df-b596-4a4509086232",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f7989a03-01d1-4471-b4e9-184345078980",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `total` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"total\")){\n            if(responseData.total!=null){\n              pm.expect(typeof _.get(responseData, \"total\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n      \n        pm.test('Response has the `registrations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"registrations\")){\n            if(responseData.registrations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"registrations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `registrations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"registrations\");  \n          let registrationsArray = _.get(pm.response.json(), \"registrations\", \"\");  \n          for (let i = 0; i < registrationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'registrations' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().registrations[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'reference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"reference\")){\n          if(pm.response.json().registrations[i].reference != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].reference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'startDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"startDate\")){\n          if(pm.response.json().registrations[i].startDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].startDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'endDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"endDate\")){\n          if(pm.response.json().registrations[i].endDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].endDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'status' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"status\")){\n          if(pm.response.json().registrations[i].status != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].status`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'credentialUrl' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"credentialUrl\")){\n          if(pm.response.json().registrations[i].credentialUrl != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].credentialUrl`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'suspendedUntil' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"suspendedUntil\")){\n          if(pm.response.json().registrations[i].suspendedUntil != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].suspendedUntil`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'issuedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"issuedAt\")){\n          if(pm.response.json().registrations[i].issuedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].issuedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'createdAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"createdAt\")){\n          if(pm.response.json().registrations[i].createdAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].createdAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'updatedAt' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"updatedAt\")){\n          if(pm.response.json().registrations[i].updatedAt != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].updatedAt`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'registrations' has 'recipient' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().registrations[i]).to.have.nested.property(\"recipient\")){\n          if(pm.response.json().registrations[i].recipient != null){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${i}].recipient`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e22deccf-940b-4dcf-95c0-6571c72012ac",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "28b736a3-9892-47fb-8250-9e0e6a383efc",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "de0133e7-d636-46c3-a789-4b171619d9c1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ccf9d113-60af-40cb-b446-06903b551905",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "c3c82a59-ae18-4904-87da-ea1324cbf65a",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "2bcdae87-b02b-496a-81c6-b3d295702c39",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1978-07-19T16:38:30.071Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"365064c1-4fd0-d6fb-70f6-91ca96e2b38d\",\n  \"issuedAt\": \"2021-04-09T21:20:29.773Z\",\n  \"recipient\": {\n    \"id\": \"dd796e9c-5fcf-afe9-17f7-04616b434a0c\",\n    \"name\": \"{ LL{ --L-. . ' 'L-\",\n    \"type\": \"person\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"1972-08-15T23:50:33.075Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f8fb0dbc-94f4-4f84-802d-fd8db0bc208e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bbe74e1e-39e3-4b3b-b7db-eb132e3bddca",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `reference` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"reference\")){\n          if(responseData.reference!=null){\n            pm.expect(typeof _.get(responseData, \"reference\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `startDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"startDate\")){\n          if(responseData.startDate!=null){\n            pm.expect(typeof _.get(responseData, \"startDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `endDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"endDate\")){\n          if(responseData.endDate!=null){\n            pm.expect(typeof _.get(responseData, \"endDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `credentialUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"credentialUrl\")){\n          if(responseData.credentialUrl!=null){\n            pm.expect(typeof _.get(responseData, \"credentialUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `suspendedUntil` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"suspendedUntil\")){\n          if(responseData.suspendedUntil!=null){\n            pm.expect(typeof _.get(responseData, \"suspendedUntil\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `issuedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"issuedAt\")){\n          if(responseData.issuedAt!=null){\n            pm.expect(typeof _.get(responseData, \"issuedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `createdAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"createdAt\")){\n          if(responseData.createdAt!=null){\n            pm.expect(typeof _.get(responseData, \"createdAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `updatedAt` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"updatedAt\")){\n          if(responseData.updatedAt!=null){\n            pm.expect(typeof _.get(responseData, \"updatedAt\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `recipient` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"recipient\")){\n          if(responseData.recipient!=null){\n            pm.expect(typeof _.get(responseData, \"recipient\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `recipient.id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.id\")){\n          if(responseData.recipient.id!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `recipient.name` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.name\")){\n          if(responseData.recipient.name!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.name\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `recipient.type` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"recipient.type\")){\n          if(responseData.recipient.type!=null){\n            pm.expect(typeof _.get(responseData, \"recipient.type\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"recipient.type\", \"\")).to.be.oneOf(branch,person,employee);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "2221e71f-6c56-427d-a3ba-c925c098368e",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "e09c0aed-0fff-4e28-92d1-75c146aaa284",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "69e82385-5c31-49d2-848d-3e28b0b33cf1",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "cd1639e9-54b4-428a-b9de-0130980734d4",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test credential-wallet-api using AI Type Open AI and AI Model gpt-4-1106-preview\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "3cb2931f-677b-4a0e-bdc9-c6ae635c908b",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}