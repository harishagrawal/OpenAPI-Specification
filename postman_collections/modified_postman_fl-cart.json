{
  "item": [
    {
      "id": "efd6a880-7d9e-461c-abe1-c03e89e6f39c",
      "name": "/get-cart/:id",
      "request": {
        "name": "/get-cart/:id",
        "description": {},
        "url": {
          "path": [
            "get-cart",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "eb12ec1d-d735-4cfe-a0f3-a8a2bdaefca9",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "30a5ccd1-f9cf-43be-af0c-8b15302cd811",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "2ccc368a-7f2d-415c-a1e3-ba22b94464a6",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "58daaf13-90b9-4e11-8edf-c56a055e3068",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "51c34ce3-b2bf-41b1-a229-eb32791935d7",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "get-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test api-spec-upload using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "f0ea7d74-c025-4c4a-b9e1-ca995004fb30",
      "name": "/checkout-cart-authenticated/:id",
      "request": {
        "name": "/checkout-cart-authenticated/:id",
        "description": {},
        "url": {
          "path": [
            "checkout-cart-authenticated",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "40d54754-c536-4c39-986f-e8a2558ef5dc",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"urn:uuid:8a8792f1-22aa-3ae3-56f3-dff72c2677ad\",\n  \"language\": \"ullamco exercitation\",\n  \"currency\": \"NOK\",\n  \"price\": {\n    \"currency\": \"EUR\",\n    \"value\": 30877127.234879255,\n    \"available\": false\n  },\n  \"journeyType\": \"RETURN\",\n  \"passengers\": [\n    {\n      \"code\": \"BABY\",\n      \"quantity\": 62363269\n    },\n    {\n      \"code\": \"INFANT\",\n      \"quantity\": 58266702\n    }\n  ],\n  \"contactPerson\": {\n    \"contactInfo\": {\n      \"address\": \"eu\",\n      \"city\": \"adipisicing\",\n      \"country\": \"RU\",\n      \"email\": \"officia dol\",\n      \"mobile\": \"incididunt quis\",\n      \"zip\": \"laboris\"\n    },\n    \"birthYear\": 8194947,\n    \"birthMonth\": 27737579,\n    \"birthDay\": 47976870,\n    \"firstName\": \"commodo\",\n    \"lastName\": \"veniam laboris in est\",\n    \"memberNumber\": \"est \",\n    \"redeemableClubPoints\": -15752061.020931676,\n    \"customerCode\": \"labore\",\n    \"gender\": \"MALE\",\n    \"nationality\": \"LV\"\n  },\n  \"passengerDetails\": [\n    {\n      \"contactInfo\": {\n        \"address\": \"ex\",\n        \"city\": \"par\",\n        \"country\": \"PK\",\n        \"email\": \"in Excepteur\",\n        \"mobile\": \"enim magna consequat amet\",\n        \"zip\": \"voluptate\"\n      },\n      \"birthYear\": 92735276,\n      \"birthMonth\": -86852404,\n      \"birthDay\": 10078860,\n      \"firstName\": \"id ipsum in labore sint\",\n      \"lastName\": \"ut in eiusmod laborum\",\n      \"memberNumber\": \"dolor nisi commodo enim\",\n      \"redeemableClubPoints\": 79309586.88526416,\n      \"customerCode\": \"eiusmod eu adipisicin\",\n      \"gender\": \"UNSPECIFIED\",\n      \"nationality\": \"CL\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"Ut anim\"\n      },\n      \"code\": \"ADULT\",\n      \"uuid\": \"dol\",\n      \"bookedItemReference\": \"do ullamco cillum laboris\"\n    },\n    {\n      \"contactInfo\": {\n        \"address\": \"reprehenderit\",\n        \"city\": \"nulla Excepteur culpa dolore anim\",\n        \"country\": \"AU\",\n        \"email\": \"sunt do est sit\",\n        \"mobile\": \"aliquip enim quis amet\",\n        \"zip\": \"in reprehenderit ullamco magna\"\n      },\n      \"birthYear\": 54158388,\n      \"birthMonth\": 16991531,\n      \"birthDay\": 65187600,\n      \"firstName\": \"ipsum elit do\",\n      \"lastName\": \"laborum\",\n      \"memberNumber\": \"est irure quis et\",\n      \"redeemableClubPoints\": -84220138.08141018,\n      \"customerCode\": \"fugiat aliquip dolore nisi\",\n      \"gender\": \"FEMALE\",\n      \"nationality\": \"ES\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"PASSPORT\",\n        \"idNumber\": \"culpa nostrud minim nisi nulla\"\n      },\n      \"code\": \"CHILD\",\n      \"uuid\": \"id occaecat sed irure\",\n      \"bookedItemReference\": \"pariatur aute reprehenderit\"\n    }\n  ],\n  \"outbound\": {\n    \"journeyCode\": \"esse\",\n    \"arrivalPort\": \"NOLAD\",\n    \"secondArrivalPort\": \"NOSVG\",\n    \"departureCode\": \"ea ad tempor\",\n    \"departurePort\": \"NOSVG\",\n    \"secondDeparturePort\": \"DKCPH\",\n    \"departureDate\": \"1974-08-19T06:00:57.133Z\",\n    \"arrivalDate\": \"1947-09-16T08:10:36.306Z\",\n    \"ticket\": {\n      \"fareType\": \"FLEX\",\n      \"ticketCode\": \"sint laboris deserunt minim\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"ADULT\",\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -3089314.622600183,\n          \"available\": true\n        }\n      },\n      {\n        \"code\": \"BABY\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -79366299.94775376,\n          \"available\": false\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"ipsum nostrud irure esse commodo\",\n        \"edit\": \"dolor\",\n        \"id\": \"proident Excepteur\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 70067873.88023615,\n          \"available\": true\n        },\n        \"quantityInCabin\": -69596985,\n        \"subCode\": \"elit labore sit\",\n        \"bookedItemReference\": \"velit incididunt dolor\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"proident quis eiusmod officia\",\n        \"edit\": \"magna officia\",\n        \"id\": \"Excepteur dolor ea\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 87107258.8993637,\n          \"available\": false\n        },\n        \"quantityInCabin\": -92471345,\n        \"subCode\": \"aute\",\n        \"bookedItemReference\": \"voluptate proident aute\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"fugiat elit\",\n        \"quantity\": -51234668,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -61041231.34380069,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"fugiat in ad\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"exercitation ad consectetur Ut ut\",\n        \"startTime\": \"2015-11-20T02:11:04.935Z\"\n      },\n      {\n        \"code\": \"deseru\",\n        \"quantity\": -17344032,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -54046893.23248833,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"magna fugiat laborum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"nisi cillum ullamco in Ut\",\n        \"startTime\": \"1998-12-14T22:28:06.417Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"in nisi Lorem dolor esse\",\n        \"quantity\": 69649034,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 80267400.27052698,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"anim nostrud\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"do\",\n        \"startTime\": \"1969-10-18T01:12:44.632Z\"\n      },\n      {\n        \"code\": \"sunt consectetur nostrud\",\n        \"quantity\": -16472608,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -17670700.449513316,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"commodo laborum mollit\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"consequat amet minim do\",\n        \"startTime\": \"1945-11-11T17:05:18.438Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"pariatur culpa\",\n        \"quantity\": -69437043,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 72173768.0607974,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"qui Lorem labore\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"incididunt\",\n        \"startTime\": \"1973-12-16T03:31:43.618Z\"\n      },\n      {\n        \"code\": \"cillum sint\",\n        \"quantity\": -85068754,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -4453242.857324064,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"anim quis occaecat sed\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"dolor eu non voluptate\",\n        \"startTime\": \"1970-08-20T15:06:22.301Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"ipsum a\",\n        \"quantity\": 72800403,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -58650648.1364013,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ut sit\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"culpa eu nulla\",\n        \"startTime\": \"2014-01-11T02:46:48.188Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"laboris nulla adipisicing Ut\"\n      },\n      {\n        \"code\": \"nostrud nulla nisi proident\",\n        \"quantity\": 9111113,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 71386848.13832992,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"ad pariatur magna\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"enim eiusmod\",\n        \"startTime\": \"1977-09-28T13:24:06.641Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"id enim\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"sit pariatur\",\n        \"quantity\": 13420916,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 82351880.56216574,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ipsum ea eiusmod culpa\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"consectetur U\",\n        \"length\": 10515288.096446395,\n        \"hasTrailer\": false,\n        \"id\": \"qui sit enim ut\"\n      },\n      {\n        \"code\": \"esse reprehenderit est\",\n        \"quantity\": 60369984,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 86673855.05027202,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"labore Lorem\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"est\",\n        \"length\": -99831356.91797642,\n        \"hasTrailer\": false,\n        \"id\": \"aute nulla elit\"\n      }\n    ],\n    \"vesselCode\": \"veniam amet aute\"\n  },\n  \"inbound\": {\n    \"journeyCode\": \"dolor laborum anim\",\n    \"arrivalPort\": \"DKCPH\",\n    \"secondArrivalPort\": \"NOSVG\",\n    \"departureCode\": \"anim aliquip adipisicing Excepteur\",\n    \"departurePort\": \"DKCPH\",\n    \"secondDeparturePort\": \"DKCPH\",\n    \"departureDate\": \"2001-04-05T04:54:45.374Z\",\n    \"arrivalDate\": \"2010-07-12T06:23:55.293Z\",\n    \"ticket\": {\n      \"fareType\": \"CRUISE_ASHORE\",\n      \"ticketCode\": \"sed magna do\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"BABY\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 85281984.79881218,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"ADULT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 41649973.40786752,\n          \"available\": false\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"est cupidatat in\",\n        \"edit\": \"reprehenderit eu adipisicing tempor\",\n        \"id\": \"nostrud\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -82440951.87461391,\n          \"available\": false\n        },\n        \"quantityInCabin\": -44875489,\n        \"subCode\": \"id ni\",\n        \"bookedItemReference\": \"nulla in dolor Duis\",\n        \"isAttachment\": false\n      },\n      {\n        \"code\": \"Excepteur incididunt\",\n        \"edit\": \"e\",\n        \"id\": \"consectetur dolore\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 49159480.83058348,\n          \"available\": true\n        },\n        \"quantityInCabin\": -24304662,\n        \"subCode\": \"incididunt laborum\",\n        \"bookedItemReference\": \"Excepteur\",\n        \"isAttachment\": true\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"enim do elit\",\n        \"quantity\": 30830859,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 83230691.5458951,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"eiusmod dolore sint mollit\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"ut nulla\",\n        \"startTime\": \"1995-03-12T18:27:03.172Z\"\n      },\n      {\n        \"code\": \"fugiat minim\",\n        \"quantity\": 32607819,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -59166999.66563015,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"in consequat tempor ad\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"consectetur in\",\n        \"startTime\": \"1965-12-10T18:15:17.569Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"ullamco adipisicing in sed Ut\",\n        \"quantity\": -99354123,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -38972586.20985755,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"nostrud culpa eiusmod ullam\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ullamco elit\",\n        \"startTime\": \"2003-03-13T08:48:06.519Z\"\n      },\n      {\n        \"code\": \"nostrud in\",\n        \"quantity\": 73100341,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 5011278.642828777,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"Lorem do proident\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ullamco nulla\",\n        \"startTime\": \"1955-10-27T13:08:54.947Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"qui\",\n        \"quantity\": -94546292,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -24170521.17486471,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"dolore Duis qu\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"officia\",\n        \"startTime\": \"1948-08-05T18:59:47.864Z\"\n      },\n      {\n        \"code\": \"do Ut consequat aliquip\",\n        \"quantity\": 84697897,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 25664419.63721791,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"qui aute magna\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"ipsum elit nulla reprehenderit in\",\n        \"startTime\": \"1987-11-12T20:31:23.280Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"consectetur elit Ut voluptate L\",\n        \"quantity\": -30397017,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -64006365.16353271,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"sint nisi anim\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"dolor ullamco adi\",\n        \"startTime\": \"1959-05-28T17:39:37.669Z\",\n        \"isOutbound\": false,\n        \"legCode\": \"do fugiat pariatur\"\n      },\n      {\n        \"code\": \"nisi non adipisicing id dolore\",\n        \"quantity\": -96794233,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 79446528.53961602,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nisi minim\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"veniam in reprehenderit eu\",\n        \"startTime\": \"2007-03-11T18:05:20.264Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"culpa ad\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"esse tempor\",\n        \"quantity\": -41950695,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -43501554.44763586,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nulla nostrud\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"in\",\n        \"length\": 22110706.44702971,\n        \"hasTrailer\": true,\n        \"id\": \"ut\"\n      },\n      {\n        \"code\": \"fugiat cillum culpa ea\",\n        \"quantity\": 82560702,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 73220812.13981232,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"nostrud in anim\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"incididunt quis et deserunt\",\n        \"length\": 39455515.12019819,\n        \"hasTrailer\": true,\n        \"id\": \"mollit non in\"\n      }\n    ],\n    \"vesselCode\": \"ex quis\"\n  },\n  \"hasVehicle\": true,\n  \"hasPet\": true,\n  \"agencyId\": \"ex ea\",\n  \"userId\": \"eu cillum ad ea\",\n  \"connectionId\": \"deserunt amet sed aute\",\n  \"status\": \"BOOKING_IN_PROGRESS\",\n  \"bookingResult\": {\n    \"created\": \"1991-05-27T16:59:52.188Z\",\n    \"bookingCode\": \"sed magna et Lorem\",\n    \"bookingState\": \"anim in aliqua\",\n    \"bookingBalance\": \"labore sunt esse\",\n    \"bookingTotal\": \"ex sunt esse nisi\",\n    \"paidState\": \"Duis fugiat aute\",\n    \"currency\": \"nisi\",\n    \"paymentUrl\": \"eu amet mollit\",\n    \"paymentSessionId\": \"fugiat minim\",\n    \"bookedItems\": {\n      \"groupPrices\": [\n        {\n          \"name\": \"laboris deserunt\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"name\": \"elit aliquip\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundPassengerPrices\": [\n        {\n          \"code\": \"BABY\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"inboundPassengerPrices\": [\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundVehicles\": [\n        {\n          \"code\": \"nostrud irure eu ut laborum\",\n          \"quantity\": -43621418,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"irure cupidatat\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"occaecat\",\n          \"length\": -5336550.349887267,\n          \"hasTrailer\": true,\n          \"id\": \"in dolore sint\"\n        },\n        {\n          \"code\": \"fugiat\",\n          \"quantity\": -362693,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"labore tempor ut\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"sed elit\",\n          \"length\": 5125631.630156308,\n          \"hasTrailer\": false,\n          \"id\": \"proident sunt tempor\"\n        }\n      ],\n      \"inboundVehicles\": [\n        {\n          \"code\": \"dolor elit tempor\",\n          \"quantity\": 11666451,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"in enim dolore dolore\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"amet dolore ea\",\n          \"length\": -14863749.837169498,\n          \"hasTrailer\": true,\n          \"id\": \"anim ipsum\"\n        },\n        {\n          \"code\": \"anim\",\n          \"quantity\": -13820978,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"amet officia\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"regNum\": \"sed exercitation id minim\",\n          \"length\": -9640451.535457924,\n          \"hasTrailer\": true,\n          \"id\": \"proident laborum aliqua\"\n        }\n      ],\n      \"outboundMeals\": [\n        {\n          \"code\": \"Excepteur et ea\",\n          \"quantity\": -4334435,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"cupidatat sed in\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"aliqua nisi reprehenderit\",\n          \"startTime\": \"1971-01-23T22:48:53.959Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"veniam\"\n        },\n        {\n          \"code\": \"in pariatur id\",\n          \"quantity\": 94810255,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"et irure Duis\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"quis anim non\",\n          \"startTime\": \"2020-11-29T05:26:14.741Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"incididunt\"\n        }\n      ],\n      \"inboundMeals\": [\n        {\n          \"code\": \"deserunt ex comm\",\n          \"quantity\": 76546944,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"non fugiat\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"exercitation Ut min\",\n          \"startTime\": \"1947-07-29T13:02:47.535Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"nisi exercitation minim\"\n        },\n        {\n          \"code\": \"Ut in\",\n          \"quantity\": -38624407,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"qui exercitation nulla fugiat\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"quis in in velit\",\n          \"startTime\": \"1966-05-09T08:29:46.027Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"ad in pariatur culpa quis\"\n        }\n      ],\n      \"outboundCabins\": [\n        {\n          \"code\": \"aliqua minim dolore\",\n          \"edit\": \"commodo Excepte\",\n          \"id\": \"ipsum\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 42086365,\n          \"subCode\": \"veniam dolore fugiat commod\",\n          \"bookedItemReference\": \"laborum pariatur esse\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"commodo ut incididunt\",\n          \"edit\": \"ad in nisi\",\n          \"id\": \"reprehenderit dolore\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 44457655,\n          \"subCode\": \"dolor proident\",\n          \"bookedItemReference\": \"qui adipisicing magna id\",\n          \"isAttachment\": true\n        }\n      ],\n      \"inboundCabins\": [\n        {\n          \"code\": \"culpa magna ipsum nostrud elit\",\n          \"edit\": \"aliquip pariatur\",\n          \"id\": \"exercitation non\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 89500197,\n          \"subCode\": \"amet dolore dolor officia\",\n          \"bookedItemReference\": \"occaecat s\",\n          \"isAttachment\": true\n        },\n        {\n          \"code\": \"anim voluptate Duis do eiusmod\",\n          \"edit\": \"magna fugiat sunt sint\",\n          \"id\": \"dolore laborum ex\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 32794166,\n          \"subCode\": \"do laborum culpa ut\",\n          \"bookedItemReference\": \"Lorem do esse adipisicing\",\n          \"isAttachment\": true\n        }\n      ],\n      \"outboundExtras\": [\n        {\n          \"code\": \"ea deserunt reprehenderit dolor sunt\",\n          \"quantity\": 66334936,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ex velit elit consectetur\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"sint pariatur magna Ut\",\n          \"startTime\": \"2013-01-27T08:28:37.896Z\"\n        },\n        {\n          \"code\": \"nostrud in tempor\",\n          \"quantity\": 41462407,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"Ut nostrud velit incididunt\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"sit anim\",\n          \"startTime\": \"1998-06-10T03:27:37.299Z\"\n        }\n      ],\n      \"inboundExtras\": [\n        {\n          \"code\": \"officia laboris magna\",\n          \"quantity\": 86260325,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"officia non\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"esse\",\n          \"startTime\": \"2013-02-04T18:08:47.038Z\"\n        },\n        {\n          \"code\": \"ut tempor ad proident\",\n          \"quantity\": -42645507,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"et minim reprehenderit dolore anim\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"nostrud\",\n          \"startTime\": \"2002-01-28T03:31:22.408Z\"\n        }\n      ],\n      \"outboundDiscounts\": [\n        {\n          \"code\": \"ad nulla sunt dolore\",\n          \"quantity\": -27504546,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nostrud non culpa consectetur\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true\n        },\n        {\n          \"code\": \"enim occaecat in ad\",\n          \"quantity\": 68905067,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"irure\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        }\n      ],\n      \"inboundDiscounts\": [\n        {\n          \"code\": \"amet in culpa\",\n          \"quantity\": 31273395,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"aliquip\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"cupidatat et occaecat sed\",\n          \"quantity\": 77953615,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"officia tempor mollit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        }\n      ]\n    }\n  },\n  \"timestamp\": 84912533,\n  \"packageCode\": \"commodo est nisi\",\n  \"referralCode\": \"cillum nisi in minim\",\n  \"voucherCode\": \"sed Duis tempor sint consequat\",\n  \"ticketBookCode\": \"irure\",\n  \"ticketBookPassword\": \"occaecat aliqua minim aute esse\",\n  \"accommodations\": [\n    {\n      \"code\": \"quis aliqua exercitation\",\n      \"name\": \"veniam in consequat\",\n      \"checkinDate\": \"1966-12-05T11:56:14.022Z\",\n      \"checkoutDate\": \"1982-03-31T21:47:57.052Z\",\n      \"rooms\": [\n        {\n          \"name\": \"minim amet\",\n          \"code\": \"ad non\",\n          \"quantity\": 45972554,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 18969354.344909206,\n            \"available\": true\n          }\n        },\n        {\n          \"name\": \"eiusmod do anim sint\",\n          \"code\": \"qui eu dolore\",\n          \"quantity\": -45846156,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -81987235.22229931,\n            \"available\": true\n          }\n        }\n      ]\n    },\n    {\n      \"code\": \"nisi esse ut in\",\n      \"name\": \"dolor aliqua dolore\",\n      \"checkinDate\": \"1958-02-07T19:13:53.378Z\",\n      \"checkoutDate\": \"1988-11-16T04:01:25.931Z\",\n      \"rooms\": [\n        {\n          \"name\": \"commodo labore officia voluptate\",\n          \"code\": \"amet voluptate\",\n          \"quantity\": -99651609,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 205577.73095534742,\n            \"available\": true\n          }\n        },\n        {\n          \"name\": \"magna dolor\",\n          \"code\": \"in ea\",\n          \"quantity\": 71792730,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -58929745.563844584,\n            \"available\": true\n          }\n        }\n      ]\n    }\n  ],\n  \"showOnlyTotalPrice\": false,\n  \"paymentMethod\": \"TICKET_BOOK\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9ea2ba1f-73cf-46b2-868a-286380ea7419",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "4afe48a8-f4ab-4b25-92b3-4867b42d0642",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "ee53e7d0-eae4-45fd-b04f-ecf04593b0d1",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "6b5359a0-536a-479c-a897-17aaf5f593a4",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-authenticated",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test api-spec-upload using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `language` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"language\")){\n          if(responseData.language!=null){\n            pm.expect(typeof _.get(responseData, \"language\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"currency\")){\n          if(responseData.currency!=null){\n            pm.expect(typeof _.get(responseData, \"currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price\")){\n          if(responseData.price!=null){\n            pm.expect(typeof _.get(responseData, \"price\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.currency\")){\n          if(responseData.price.currency!=null){\n            pm.expect(typeof _.get(responseData, \"price.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"price.currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price.value` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.value\")){\n          if(responseData.price.value!=null){\n            pm.expect(typeof _.get(responseData, \"price.value\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.available` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.available\")){\n          if(responseData.price.available!=null){\n            pm.expect(typeof _.get(responseData, \"price.available\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `journeyType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"journeyType\")){\n          if(responseData.journeyType!=null){\n            pm.expect(typeof _.get(responseData, \"journeyType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"journeyType\", \"\")).to.be.oneOf(ONEWAY,RETURN,CRUISE,PACKAGE);\n      \n        pm.test('Response has the `passengers` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengers\")){\n            if(responseData.passengers!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengers\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengers` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengers\");  \n          let passengersArray = _.get(pm.response.json(), \"passengers\", \"\");  \n          for (let i = 0; i < passengersArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengers' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengers[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengers\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n        pm.test(`${i} element of array 'passengers' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().passengers[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `contactPerson` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson\")){\n          if(responseData.contactPerson!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo\")){\n          if(responseData.contactPerson.contactInfo!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.address` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.address\")){\n          if(responseData.contactPerson.contactInfo.address!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.address\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.city` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.city\")){\n          if(responseData.contactPerson.contactInfo.city!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.city\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.country` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.country\")){\n          if(responseData.contactPerson.contactInfo.country!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.country\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.contactInfo.country\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test('Response has the `contactPerson.contactInfo.email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.email\")){\n          if(responseData.contactPerson.contactInfo.email!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.mobile` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.mobile\")){\n          if(responseData.contactPerson.contactInfo.mobile!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.mobile\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.zip` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.zip\")){\n          if(responseData.contactPerson.contactInfo.zip!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.zip\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `contactPerson.birthYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthYear\")){\n            if(responseData.contactPerson.birthYear!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthMonth` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthMonth\")){\n            if(responseData.contactPerson.birthMonth!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthMonth\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthDay` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthDay\")){\n            if(responseData.contactPerson.birthDay!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthDay\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `contactPerson.firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.firstName\")){\n          if(responseData.contactPerson.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.lastName\")){\n          if(responseData.contactPerson.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.memberNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.memberNumber\")){\n          if(responseData.contactPerson.memberNumber!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.memberNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.redeemableClubPoints` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.redeemableClubPoints\")){\n          if(responseData.contactPerson.redeemableClubPoints!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.redeemableClubPoints\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.customerCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.customerCode\")){\n          if(responseData.contactPerson.customerCode!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.customerCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.gender\")){\n          if(responseData.contactPerson.gender!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.gender\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test('Response has the `contactPerson.nationality` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.nationality\")){\n          if(responseData.contactPerson.nationality!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.nationality\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.nationality\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n      \n        pm.test('Response has the `passengerDetails` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengerDetails\")){\n            if(responseData.passengerDetails!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengerDetails\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengerDetails` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengerDetails\");  \n          let passengerDetailsArray = _.get(pm.response.json(), \"passengerDetails\", \"\");  \n          for (let i = 0; i < passengerDetailsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengerDetails' has 'contactInfo' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"contactInfo\")){\n          if(pm.response.json().passengerDetails[i].contactInfo != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].contactInfo`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthYear' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthYear\")){\n            if(pm.response.json().passengerDetails[i].birthYear != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthYear`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthMonth' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthMonth\")){\n            if(pm.response.json().passengerDetails[i].birthMonth != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthMonth`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthDay' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthDay\")){\n            if(pm.response.json().passengerDetails[i].birthDay != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthDay`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'passengerDetails' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().passengerDetails[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().passengerDetails[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'memberNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"memberNumber\")){\n          if(pm.response.json().passengerDetails[i].memberNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].memberNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'redeemableClubPoints' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"redeemableClubPoints\")){\n          if(pm.response.json().passengerDetails[i].redeemableClubPoints != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].redeemableClubPoints`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'customerCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"customerCode\")){\n          if(pm.response.json().passengerDetails[i].customerCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].customerCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"gender\")){\n          if(pm.response.json().passengerDetails[i].gender != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].gender`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'nationality' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"nationality\")){\n          if(pm.response.json().passengerDetails[i].nationality != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].nationality`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'disabledPerson' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"disabledPerson\")){\n          if(pm.response.json().passengerDetails[i].disabledPerson != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].disabledPerson`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'id' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().passengerDetails[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].id`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengerDetails[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'uuid' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"uuid\")){\n          if(pm.response.json().passengerDetails[i].uuid != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].uuid`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().passengerDetails[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound\")){\n          if(responseData.outbound!=null){\n            pm.expect(typeof _.get(responseData, \"outbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.journeyCode\")){\n          if(responseData.outbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalPort\")){\n          if(responseData.outbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondArrivalPort\")){\n          if(responseData.outbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureCode\")){\n          if(responseData.outbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departurePort\")){\n          if(responseData.outbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondDeparturePort\")){\n          if(responseData.outbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureDate\")){\n          if(responseData.outbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalDate\")){\n          if(responseData.outbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket\")){\n          if(responseData.outbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.fareType\")){\n          if(responseData.outbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `outbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.ticketCode\")){\n          if(responseData.outbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `outbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.passengerPrices\")){\n            if(responseData.outbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"outbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.cabins\")){\n            if(responseData.outbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"outbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().outbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().outbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshore\")){\n            if(responseData.outbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"outbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshoreWithOptions\")){\n            if(responseData.outbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasOnboard\")){\n            if(responseData.outbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"outbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.meals\")){\n            if(responseData.outbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"outbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().outbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().outbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.vehicles\")){\n            if(responseData.outbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"outbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().outbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().outbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().outbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.vesselCode\")){\n          if(responseData.outbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound\")){\n          if(responseData.inbound!=null){\n            pm.expect(typeof _.get(responseData, \"inbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.journeyCode\")){\n          if(responseData.inbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalPort\")){\n          if(responseData.inbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondArrivalPort\")){\n          if(responseData.inbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureCode\")){\n          if(responseData.inbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departurePort\")){\n          if(responseData.inbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondDeparturePort\")){\n          if(responseData.inbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureDate\")){\n          if(responseData.inbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalDate\")){\n          if(responseData.inbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket\")){\n          if(responseData.inbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.fareType\")){\n          if(responseData.inbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `inbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.ticketCode\")){\n          if(responseData.inbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `inbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.passengerPrices\")){\n            if(responseData.inbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"inbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.cabins\")){\n            if(responseData.inbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"inbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().inbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().inbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshore\")){\n            if(responseData.inbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"inbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshoreWithOptions\")){\n            if(responseData.inbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasOnboard\")){\n            if(responseData.inbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"inbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.meals\")){\n            if(responseData.inbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"inbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().inbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().inbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.vehicles\")){\n            if(responseData.inbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"inbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().inbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().inbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().inbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `inbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.vesselCode\")){\n          if(responseData.inbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasVehicle` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasVehicle\")){\n          if(responseData.hasVehicle!=null){\n            pm.expect(typeof _.get(responseData, \"hasVehicle\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasPet` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasPet\")){\n          if(responseData.hasPet!=null){\n            pm.expect(typeof _.get(responseData, \"hasPet\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `agencyId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"agencyId\")){\n          if(responseData.agencyId!=null){\n            pm.expect(typeof _.get(responseData, \"agencyId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `userId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"userId\")){\n          if(responseData.userId!=null){\n            pm.expect(typeof _.get(responseData, \"userId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `connectionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"connectionId\")){\n          if(responseData.connectionId!=null){\n            pm.expect(typeof _.get(responseData, \"connectionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf(ACTIVE,BOOKED,DELETED,EXPIRED,BOOKING_IN_PROGRESS);\n\n      pm.test('Response has the `bookingResult` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult\")){\n          if(responseData.bookingResult!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.created` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.created\")){\n          if(responseData.bookingResult.created!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.created\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingCode\")){\n          if(responseData.bookingResult.bookingCode!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingState\")){\n          if(responseData.bookingResult.bookingState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingBalance` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingBalance\")){\n          if(responseData.bookingResult.bookingBalance!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingBalance\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingTotal` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingTotal\")){\n          if(responseData.bookingResult.bookingTotal!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingTotal\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paidState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paidState\")){\n          if(responseData.bookingResult.paidState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paidState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.currency\")){\n          if(responseData.bookingResult.currency!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentUrl\")){\n          if(responseData.bookingResult.paymentUrl!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentSessionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentSessionId\")){\n          if(responseData.bookingResult.paymentSessionId!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentSessionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookedItems` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems\")){\n          if(responseData.bookingResult.bookedItems!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookedItems\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `bookingResult.bookedItems.groupPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\")){\n            if(responseData.bookingResult.bookedItems.groupPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.groupPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\");  \n          let groupPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\", \"\");  \n          for (let i = 0; i < groupPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.outboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\");  \n          let outboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\");  \n          for (let i = 0; i < outboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.inboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\");  \n          let inboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\");  \n          for (let i = 0; i < inboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.outboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\");  \n          let outboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\", \"\");  \n          for (let i = 0; i < outboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.inboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\");  \n          let inboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\", \"\");  \n          for (let i = 0; i < inboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\")){\n            if(responseData.bookingResult.bookedItems.outboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\");  \n          let outboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\");  \n          for (let i = 0; i < outboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\")){\n            if(responseData.bookingResult.bookedItems.inboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\");  \n          let inboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\");  \n          for (let i = 0; i < inboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\")){\n            if(responseData.bookingResult.bookedItems.outboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\");  \n          let outboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\", \"\");  \n          for (let i = 0; i < outboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\")){\n            if(responseData.bookingResult.bookedItems.inboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\");  \n          let inboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\", \"\");  \n          for (let i = 0; i < inboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\")){\n            if(responseData.bookingResult.bookedItems.outboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\");  \n          let outboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\");  \n          for (let i = 0; i < outboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\")){\n            if(responseData.bookingResult.bookedItems.inboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\");  \n          let inboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\");  \n          for (let i = 0; i < inboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.outboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\");  \n          let outboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\", \"\");  \n          for (let i = 0; i < outboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.inboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\");  \n          let inboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\", \"\");  \n          for (let i = 0; i < inboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n        pm.test('Response has the `timestamp` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"timestamp\")){\n            if(responseData.timestamp!=null){\n              pm.expect(typeof _.get(responseData, \"timestamp\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `packageCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"packageCode\")){\n          if(responseData.packageCode!=null){\n            pm.expect(typeof _.get(responseData, \"packageCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `referralCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"referralCode\")){\n          if(responseData.referralCode!=null){\n            pm.expect(typeof _.get(responseData, \"referralCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `voucherCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"voucherCode\")){\n          if(responseData.voucherCode!=null){\n            pm.expect(typeof _.get(responseData, \"voucherCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookCode\")){\n          if(responseData.ticketBookCode!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookPassword` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookPassword\")){\n          if(responseData.ticketBookPassword!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookPassword\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `accommodations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"accommodations\")){\n            if(responseData.accommodations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"accommodations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `accommodations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"accommodations\");  \n          let accommodationsArray = _.get(pm.response.json(), \"accommodations\", \"\");  \n          for (let i = 0; i < accommodationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'accommodations' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().accommodations[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().accommodations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkinDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkinDate\")){\n          if(pm.response.json().accommodations[i].checkinDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkinDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkoutDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkoutDate\")){\n          if(pm.response.json().accommodations[i].checkoutDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkoutDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'accommodations' has 'rooms' as an array`,function(){ \n          if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"rooms\")){\n            if(pm.response.json().accommodations[i].rooms != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `accommodations[${i}].rooms`))).to.equal(true);\n            }\n          }\n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `showOnlyTotalPrice` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"showOnlyTotalPrice\")){\n          if(responseData.showOnlyTotalPrice!=null){\n            pm.expect(typeof _.get(responseData, \"showOnlyTotalPrice\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `paymentMethod` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"paymentMethod\")){\n          if(responseData.paymentMethod!=null){\n            pm.expect(typeof _.get(responseData, \"paymentMethod\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"paymentMethod\", \"\")).to.be.oneOf(CREDIT_CARD,VOUCHER,CLUB_POINTS,TICKET_BOOK);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "db5da341-f4bf-4052-8f99-72d97433acf5",
      "name": "/checkout-cart-anonymous/:id",
      "request": {
        "name": "/checkout-cart-anonymous/:id",
        "description": {},
        "url": {
          "path": [
            "checkout-cart-anonymous",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null
      },
      "response": [
        {
          "id": "0a2a1c8d-c537-4705-94c2-a82b8ccb5c5f",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"urn:uuid:02be5415-11dc-3d2d-cef4-55733c5de7a8\",\n  \"language\": \"in aliqua id consequat Excepteur\",\n  \"currency\": \"NOK\",\n  \"price\": {\n    \"currency\": \"EUR\",\n    \"value\": 31392501.2537359,\n    \"available\": true\n  },\n  \"journeyType\": \"PACKAGE\",\n  \"passengers\": [\n    {\n      \"code\": \"BABY\",\n      \"quantity\": 89435543\n    },\n    {\n      \"code\": \"ADULT\",\n      \"quantity\": -76988\n    }\n  ],\n  \"contactPerson\": {\n    \"contactInfo\": {\n      \"address\": \"dolore tempor pariatur Duis\",\n      \"city\": \"aliquip\",\n      \"country\": \"AF\",\n      \"email\": \"ut occaecat\",\n      \"mobile\": \"ut amet\",\n      \"zip\": \"est proident ex\"\n    },\n    \"birthYear\": -62756620,\n    \"birthMonth\": 33010034,\n    \"birthDay\": -45674879,\n    \"firstName\": \"ex ea\",\n    \"lastName\": \"dolore minim dolor enim\",\n    \"memberNumber\": \"enim in dolore incididunt\",\n    \"redeemableClubPoints\": -68641790.32820337,\n    \"customerCode\": \"sint in commodo\",\n    \"gender\": \"ORGANIZATION\",\n    \"nationality\": \"GB\"\n  },\n  \"passengerDetails\": [\n    {\n      \"contactInfo\": {\n        \"address\": \"dolor ullamco nulla Lorem\",\n        \"city\": \"paria\",\n        \"country\": \"SI\",\n        \"email\": \"id\",\n        \"mobile\": \"sit\",\n        \"zip\": \"laboris\"\n      },\n      \"birthYear\": 40725133,\n      \"birthMonth\": 77390610,\n      \"birthDay\": 22339149,\n      \"firstName\": \"enim Excepteur\",\n      \"lastName\": \"Duis velit\",\n      \"memberNumber\": \"quis exercitation anim minim in\",\n      \"redeemableClubPoints\": 12939854.991682515,\n      \"customerCode\": \"in aute do\",\n      \"gender\": \"ORGANIZATION\",\n      \"nationality\": \"KM\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"PASSPORT\",\n        \"idNumber\": \"n\"\n      },\n      \"code\": \"CHILD\",\n      \"uuid\": \"consequat labore ad\",\n      \"bookedItemReference\": \"veniam id\"\n    },\n    {\n      \"contactInfo\": {\n        \"address\": \"veniam ipsum au\",\n        \"city\": \"in sint ut\",\n        \"country\": \"US\",\n        \"email\": \"commodo sunt ut reprehenderit\",\n        \"mobile\": \"consequat in nulla\",\n        \"zip\": \"dolor dolor consectetur deserunt pariatur\"\n      },\n      \"birthYear\": -75548936,\n      \"birthMonth\": -44126099,\n      \"birthDay\": 98877869,\n      \"firstName\": \"sed mollit Duis ad\",\n      \"lastName\": \"tempor commodo est nostrud\",\n      \"memberNumber\": \"veniam ut\",\n      \"redeemableClubPoints\": 21859417.27822742,\n      \"customerCode\": \"Duis ut occaecat eu\",\n      \"gender\": \"UNSPECIFIED\",\n      \"nationality\": \"IQ\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"consequat eu esse labore ex\"\n      },\n      \"code\": \"INFANT\",\n      \"uuid\": \"fugiat sint enim nisi\",\n      \"bookedItemReference\": \"pariatur nostrud\"\n    }\n  ],\n  \"outbound\": {\n    \"journeyCode\": \"elit aute ullamco cupidatat cillum\",\n    \"arrivalPort\": \"SESMD\",\n    \"secondArrivalPort\": \"NOTRF\",\n    \"departureCode\": \"Lorem sit Excepteur qui\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"NOKRS\",\n    \"departureDate\": \"1977-05-31T10:48:52.675Z\",\n    \"arrivalDate\": \"1996-11-24T11:43:38.276Z\",\n    \"ticket\": {\n      \"fareType\": \"FLEX\",\n      \"ticketCode\": \"magna fugiat officia\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"INFANT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -24192955.072604284,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -99027769.13435134,\n          \"available\": false\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"officia ex elit enim\",\n        \"edit\": \"dolor reprehenderit et Ut Duis\",\n        \"id\": \"officia ut aliquip sed\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 83367825.14861628,\n          \"available\": true\n        },\n        \"quantityInCabin\": -3247,\n        \"subCode\": \"amet labore\",\n        \"bookedItemReference\": \"officia\",\n        \"isAttachment\": false\n      },\n      {\n        \"code\": \"aute Ut fugiat dolor\",\n        \"edit\": \"quis ea sint\",\n        \"id\": \"adipisicin\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -81549770.4138779,\n          \"available\": true\n        },\n        \"quantityInCabin\": -49035788,\n        \"subCode\": \"nulla voluptate\",\n        \"bookedItemReference\": \"eu nisi sunt incidi\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"ex eu\",\n        \"quantity\": 47267295,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 22214025.278311223,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"pariatur est\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"eiusmod ali\",\n        \"startTime\": \"1961-05-16T11:12:41.678Z\"\n      },\n      {\n        \"code\": \"dolor\",\n        \"quantity\": 2209668,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -19077227.897390485,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nostrud Duis \",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"tempor eiusmod\",\n        \"startTime\": \"1970-02-12T16:27:09.744Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"eiusmod aliquip dolor\",\n        \"quantity\": -36535878,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 14418982.505641684,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"laborum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"sunt in ex\",\n        \"startTime\": \"2015-12-03T08:08:52.349Z\"\n      },\n      {\n        \"code\": \"et nisi est sit\",\n        \"quantity\": 65453511,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 86462876.88999516,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"consectetur nostrud culpa \",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"aliquip laboris sit labore\",\n        \"startTime\": \"1983-12-08T07:05:03.397Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"proident\",\n        \"quantity\": -64544680,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -22394111.809110045,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ips\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ut aliquip ut\",\n        \"startTime\": \"1975-02-18T19:42:50.826Z\"\n      },\n      {\n        \"code\": \"quis enim ad qui\",\n        \"quantity\": 52198080,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -86148372.26006764,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"Lorem tempor nulla sit\",\n        \"startTime\": \"2018-01-13T07:54:48.705Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"Duis adipisicing quis\",\n        \"quantity\": 78811281,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -23995004.53819421,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"non conse\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Excepteur cillum \",\n        \"startTime\": \"2013-11-10T01:52:34.409Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"id\"\n      },\n      {\n        \"code\": \"elit\",\n        \"quantity\": -28472161,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 46132024.23821953,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nulla in mo\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ut dolore commodo\",\n        \"startTime\": \"1970-08-09T05:19:57.610Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"sed \"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"adipisicing do\",\n        \"quantity\": -80261438,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -91276093.69472736,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"in aliquip nisi eiusmod\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"Ut sed\",\n        \"length\": 86725515.84768108,\n        \"hasTrailer\": false,\n        \"id\": \"Ut Duis fugiat laborum ea\"\n      },\n      {\n        \"code\": \"adipisicing labore cupidatat do laborum\",\n        \"quantity\": 18356574,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 91577675.9711357,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"minim est voluptate ut\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"c\",\n        \"length\": 7939336.432332799,\n        \"hasTrailer\": true,\n        \"id\": \"dolore ullamco nostrud do cillum\"\n      }\n    ],\n    \"vesselCode\": \"non id ea nulla\"\n  },\n  \"inbound\": {\n    \"journeyCode\": \"\",\n    \"arrivalPort\": \"DKCPH\",\n    \"secondArrivalPort\": \"NOTRF\",\n    \"departureCode\": \"eu Duis deserunt\",\n    \"departurePort\": \"DKHIR\",\n    \"secondDeparturePort\": \"NOSVG\",\n    \"departureDate\": \"1958-05-30T06:57:48.682Z\",\n    \"arrivalDate\": \"2019-08-15T17:31:03.293Z\",\n    \"ticket\": {\n      \"fareType\": \"CRUISE_ASHORE\",\n      \"ticketCode\": \"ullamco fugiat laborum velit\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"INFANT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -34102005.98397339,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 40471090.98133293,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"dolore dolore velit ex\",\n        \"edit\": \"anim mollit\",\n        \"id\": \"eu\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 18573293.220338047,\n          \"available\": true\n        },\n        \"quantityInCabin\": 62540258,\n        \"subCode\": \"magna Duis\",\n        \"bookedItemReference\": \"reprehenderit dolor ex velit\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"est commodo\",\n        \"edit\": \"cupidatat\",\n        \"id\": \"esse\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -76572173.6341682,\n          \"available\": true\n        },\n        \"quantityInCabin\": -32949292,\n        \"subCode\": \"magna est\",\n        \"bookedItemReference\": \"laboris\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"ullamco Duis officia ut\",\n        \"quantity\": 51386926,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -17422736.149391353,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"irure Duis reprehenderit magna proident\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"enim voluptate\",\n        \"startTime\": \"2023-06-20T10:28:32.851Z\"\n      },\n      {\n        \"code\": \"do in\",\n        \"quantity\": -21996436,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -24306287.700249568,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ullamco ex mollit\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"exercitation nostrud sunt enim\",\n        \"startTime\": \"2021-04-14T21:06:26.079Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"sit mollit voluptate\",\n        \"quantity\": 23251225,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 96657351.65944839,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ut\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"id ut et Excepteur Duis\",\n        \"startTime\": \"1986-08-22T07:08:32.955Z\"\n      },\n      {\n        \"code\": \"minim aute tempor\",\n        \"quantity\": -28753198,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -61245576.8941909,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"exercitation ad laborum ipsum\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Lorem sed id labore\",\n        \"startTime\": \"1948-02-25T03:09:40.001Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"veniam magna i\",\n        \"quantity\": -48963628,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 40264580.302016884,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"esse sunt\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"nisi\",\n        \"startTime\": \"1979-04-17T20:53:28.714Z\"\n      },\n      {\n        \"code\": \"commodo dolore\",\n        \"quantity\": 34777311,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 44604023.03572604,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"id deserunt mollit ut ipsum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ex tempor magna in\",\n        \"startTime\": \"1951-08-28T15:06:48.667Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"do quis\",\n        \"quantity\": 10540792,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -63162573.36872311,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"cupidatat aliquip\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"voluptate aute dolore velit\",\n        \"startTime\": \"1992-11-26T21:45:05.948Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"consequat magna al\"\n      },\n      {\n        \"code\": \"id\",\n        \"quantity\": 69574293,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 69094505.37496674,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nisi\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"fugiat\",\n        \"startTime\": \"1978-06-23T16:28:48.774Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"eiusmod ut exercitation qui consectetur\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"nisi dolor dolor\",\n        \"quantity\": 16086273,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 27620052.8179134,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"aliquip\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"do id proident voluptate dolore\",\n        \"length\": 13479526.979051396,\n        \"hasTrailer\": false,\n        \"id\": \"dolore mollit exerc\"\n      },\n      {\n        \"code\": \"cillum exercitation est eiusmod\",\n        \"quantity\": -25628874,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -68390113.21665232,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"ullamco\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"dolore \",\n        \"length\": -4950200.374140084,\n        \"hasTrailer\": true,\n        \"id\": \"aliquip ullamco dolore magna\"\n      }\n    ],\n    \"vesselCode\": \"proident enim est adipisicing fugiat\"\n  },\n  \"hasVehicle\": false,\n  \"hasPet\": false,\n  \"agencyId\": \"cillum Ut anim\",\n  \"userId\": \"dolor eu\",\n  \"connectionId\": \"laboris aute\",\n  \"status\": \"BOOKING_IN_PROGRESS\",\n  \"bookingResult\": {\n    \"created\": \"1954-04-30T08:21:21.463Z\",\n    \"bookingCode\": \"consectetur labore\",\n    \"bookingState\": \"labore fugiat minim consectetur\",\n    \"bookingBalance\": \"velit\",\n    \"bookingTotal\": \"non\",\n    \"paidState\": \"nostrud consequat non sed\",\n    \"currency\": \"Lorem consequat\",\n    \"paymentUrl\": \"deserunt minim officia sed\",\n    \"paymentSessionId\": \"ex te\",\n    \"bookedItems\": {\n      \"groupPrices\": [\n        {\n          \"name\": \"minim\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"name\": \"nisi\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundPassengerPrices\": [\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"ADULT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"inboundPassengerPrices\": [\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundVehicles\": [\n        {\n          \"code\": \"pariatur incididunt\",\n          \"quantity\": -86521403,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla consectetur non\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"Ut irure enim\",\n          \"length\": -80896131.48658583,\n          \"hasTrailer\": false,\n          \"id\": \"esse ipsum id\"\n        },\n        {\n          \"code\": \"qui exercitation velit e\",\n          \"quantity\": -61933473,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla reprehenderit velit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"enim\",\n          \"length\": 78359305.56698546,\n          \"hasTrailer\": true,\n          \"id\": \"tempor amet\"\n        }\n      ],\n      \"inboundVehicles\": [\n        {\n          \"code\": \"sit esse veniam reprehenderit\",\n          \"quantity\": 43368949,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ut minim\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"pariatur\",\n          \"length\": -79341688.40319508,\n          \"hasTrailer\": false,\n          \"id\": \"labore dolore commodo non minim\"\n        },\n        {\n          \"code\": \"id\",\n          \"quantity\": -15665136,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"cillum esse\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"quis Ut\",\n          \"length\": -15831732.689881936,\n          \"hasTrailer\": true,\n          \"id\": \"incididunt commodo\"\n        }\n      ],\n      \"outboundMeals\": [\n        {\n          \"code\": \"Ut ipsum\",\n          \"quantity\": -68760344,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla minim\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"magna in pariatur in sunt\",\n          \"startTime\": \"1945-01-04T07:32:11.228Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"a\"\n        },\n        {\n          \"code\": \"qui mollit pariatur\",\n          \"quantity\": -86690854,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"qui cupidatat non\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"tempor dolore\",\n          \"startTime\": \"1999-07-19T17:53:53.539Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"Ut dolo\"\n        }\n      ],\n      \"inboundMeals\": [\n        {\n          \"code\": \"sit aliqua est velit\",\n          \"quantity\": -98625874,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"magna ipsum sunt\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"qui\",\n          \"startTime\": \"1993-07-01T02:12:49.835Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"esse fugiat\"\n        },\n        {\n          \"code\": \"non consequat\",\n          \"quantity\": 30348646,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"esse laboru\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"est Excepteur\",\n          \"startTime\": \"1978-08-08T13:01:29.464Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"nisi labo\"\n        }\n      ],\n      \"outboundCabins\": [\n        {\n          \"code\": \"i\",\n          \"edit\": \"tempor sit\",\n          \"id\": \"ad eiusmod deserunt tempor\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -50345720,\n          \"subCode\": \"ex est\",\n          \"bookedItemReference\": \"id in\",\n          \"isAttachment\": true\n        },\n        {\n          \"code\": \"quis\",\n          \"edit\": \"sunt\",\n          \"id\": \"esse mollit magna adipisicing\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -43413915,\n          \"subCode\": \"id commodo\",\n          \"bookedItemReference\": \"voluptate magna in incididunt\",\n          \"isAttachment\": true\n        }\n      ],\n      \"inboundCabins\": [\n        {\n          \"code\": \"in consectetur sint\",\n          \"edit\": \"ut deserunt sit dolor\",\n          \"id\": \"magna culpa\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 40680366,\n          \"subCode\": \"dolor veniam irure\",\n          \"bookedItemReference\": \"minim voluptate\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"dolor pariatur magna officia\",\n          \"edit\": \"eiusmod tempor\",\n          \"id\": \"am\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 44376285,\n          \"subCode\": \"ut culpa sunt occaecat cupidatat\",\n          \"bookedItemReference\": \"ad id\",\n          \"isAttachment\": false\n        }\n      ],\n      \"outboundExtras\": [\n        {\n          \"code\": \"consequat non\",\n          \"quantity\": 82312805,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"eu commodo occaecat nostr\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"exercitation incididunt\",\n          \"startTime\": \"1997-07-30T10:10:27.945Z\"\n        },\n        {\n          \"code\": \"aute pariatur dolor\",\n          \"quantity\": 91869519,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"in reprehenderit fugiat aliquip\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"adipisicing exercitation velit voluptate in\",\n          \"startTime\": \"1986-07-10T15:30:38.297Z\"\n        }\n      ],\n      \"inboundExtras\": [\n        {\n          \"code\": \"nisi tempor ipsum\",\n          \"quantity\": -98136352,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"pariat\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"Lorem occaecat tempor et\",\n          \"startTime\": \"2005-01-15T06:28:56.727Z\"\n        },\n        {\n          \"code\": \"fugiat eiusmod ad officia \",\n          \"quantity\": -15595719,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"reprehenderit adipisicing aliquip culpa esse\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"Excepteur\",\n          \"startTime\": \"1962-04-16T09:14:10.601Z\"\n        }\n      ],\n      \"outboundDiscounts\": [\n        {\n          \"code\": \"officia veniam incididunt\",\n          \"quantity\": -27444640,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"laborum\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        },\n        {\n          \"code\": \"in dolore sunt\",\n          \"quantity\": 54957095,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"velit amet labore quis est\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false\n        }\n      ],\n      \"inboundDiscounts\": [\n        {\n          \"code\": \"labore irure aliqua officia enim\",\n          \"quantity\": 21104924,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ut eiusmod\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"dolore\",\n          \"quantity\": -6993371,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nisi veniam\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true\n        }\n      ]\n    }\n  },\n  \"timestamp\": 59923045,\n  \"packageCode\": \"aliquip\",\n  \"referralCode\": \"minim eiusmod in sit\",\n  \"voucherCode\": \"sint id esse culpa\",\n  \"ticketBookCode\": \"aute ea in sint\",\n  \"ticketBookPassword\": \"sed ali\",\n  \"accommodations\": [\n    {\n      \"code\": \"labore in ut culpa\",\n      \"name\": \"cillum ut dolor laborum\",\n      \"checkinDate\": \"1983-04-22T08:05:24.825Z\",\n      \"checkoutDate\": \"2008-03-29T12:16:25.672Z\",\n      \"rooms\": [\n        {\n          \"name\": \"id dolore magna occaecat deserunt\",\n          \"code\": \"non sed sint exercitation\",\n          \"quantity\": -34318759,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 83783257.09769231,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"incididunt elit\",\n          \"code\": \"consequat exerc\",\n          \"quantity\": 84419117,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -12305592.547409236,\n            \"available\": true\n          }\n        }\n      ]\n    },\n    {\n      \"code\": \"in id ipsum in magna\",\n      \"name\": \"anim aliqua\",\n      \"checkinDate\": \"1991-08-20T15:31:40.171Z\",\n      \"checkoutDate\": \"1952-08-26T06:44:00.573Z\",\n      \"rooms\": [\n        {\n          \"name\": \"pariatur quis\",\n          \"code\": \"nisi labore\",\n          \"quantity\": -90550212,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -43939942.18258377,\n            \"available\": true\n          }\n        },\n        {\n          \"name\": \"Duis occaecat ullamco eu\",\n          \"code\": \"eu mollit\",\n          \"quantity\": -60544324,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 20406654.68599783,\n            \"available\": true\n          }\n        }\n      ]\n    }\n  ],\n  \"showOnlyTotalPrice\": true,\n  \"paymentMethod\": \"VOUCHER\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "21696585-eb60-4548-8951-11e81d06fdbf",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "09045fa0-c94d-4c85-9417-1fa2168f793b",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "c0e57e5e-470f-49b8-8351-b26d3b3add65",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "checkout-cart-anonymous",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test api-spec-upload using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `language` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"language\")){\n          if(responseData.language!=null){\n            pm.expect(typeof _.get(responseData, \"language\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"currency\")){\n          if(responseData.currency!=null){\n            pm.expect(typeof _.get(responseData, \"currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price\")){\n          if(responseData.price!=null){\n            pm.expect(typeof _.get(responseData, \"price\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.currency\")){\n          if(responseData.price.currency!=null){\n            pm.expect(typeof _.get(responseData, \"price.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"price.currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price.value` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.value\")){\n          if(responseData.price.value!=null){\n            pm.expect(typeof _.get(responseData, \"price.value\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.available` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.available\")){\n          if(responseData.price.available!=null){\n            pm.expect(typeof _.get(responseData, \"price.available\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `journeyType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"journeyType\")){\n          if(responseData.journeyType!=null){\n            pm.expect(typeof _.get(responseData, \"journeyType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"journeyType\", \"\")).to.be.oneOf(ONEWAY,RETURN,CRUISE,PACKAGE);\n      \n        pm.test('Response has the `passengers` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengers\")){\n            if(responseData.passengers!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengers\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengers` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengers\");  \n          let passengersArray = _.get(pm.response.json(), \"passengers\", \"\");  \n          for (let i = 0; i < passengersArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengers' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengers[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengers\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n        pm.test(`${i} element of array 'passengers' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().passengers[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `contactPerson` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson\")){\n          if(responseData.contactPerson!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo\")){\n          if(responseData.contactPerson.contactInfo!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.address` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.address\")){\n          if(responseData.contactPerson.contactInfo.address!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.address\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.city` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.city\")){\n          if(responseData.contactPerson.contactInfo.city!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.city\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.country` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.country\")){\n          if(responseData.contactPerson.contactInfo.country!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.country\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.contactInfo.country\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test('Response has the `contactPerson.contactInfo.email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.email\")){\n          if(responseData.contactPerson.contactInfo.email!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.mobile` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.mobile\")){\n          if(responseData.contactPerson.contactInfo.mobile!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.mobile\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.zip` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.zip\")){\n          if(responseData.contactPerson.contactInfo.zip!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.zip\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `contactPerson.birthYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthYear\")){\n            if(responseData.contactPerson.birthYear!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthMonth` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthMonth\")){\n            if(responseData.contactPerson.birthMonth!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthMonth\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthDay` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthDay\")){\n            if(responseData.contactPerson.birthDay!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthDay\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `contactPerson.firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.firstName\")){\n          if(responseData.contactPerson.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.lastName\")){\n          if(responseData.contactPerson.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.memberNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.memberNumber\")){\n          if(responseData.contactPerson.memberNumber!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.memberNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.redeemableClubPoints` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.redeemableClubPoints\")){\n          if(responseData.contactPerson.redeemableClubPoints!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.redeemableClubPoints\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.customerCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.customerCode\")){\n          if(responseData.contactPerson.customerCode!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.customerCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.gender\")){\n          if(responseData.contactPerson.gender!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.gender\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test('Response has the `contactPerson.nationality` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.nationality\")){\n          if(responseData.contactPerson.nationality!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.nationality\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.nationality\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n      \n        pm.test('Response has the `passengerDetails` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengerDetails\")){\n            if(responseData.passengerDetails!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengerDetails\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengerDetails` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengerDetails\");  \n          let passengerDetailsArray = _.get(pm.response.json(), \"passengerDetails\", \"\");  \n          for (let i = 0; i < passengerDetailsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengerDetails' has 'contactInfo' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"contactInfo\")){\n          if(pm.response.json().passengerDetails[i].contactInfo != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].contactInfo`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthYear' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthYear\")){\n            if(pm.response.json().passengerDetails[i].birthYear != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthYear`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthMonth' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthMonth\")){\n            if(pm.response.json().passengerDetails[i].birthMonth != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthMonth`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthDay' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthDay\")){\n            if(pm.response.json().passengerDetails[i].birthDay != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthDay`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'passengerDetails' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().passengerDetails[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().passengerDetails[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'memberNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"memberNumber\")){\n          if(pm.response.json().passengerDetails[i].memberNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].memberNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'redeemableClubPoints' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"redeemableClubPoints\")){\n          if(pm.response.json().passengerDetails[i].redeemableClubPoints != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].redeemableClubPoints`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'customerCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"customerCode\")){\n          if(pm.response.json().passengerDetails[i].customerCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].customerCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"gender\")){\n          if(pm.response.json().passengerDetails[i].gender != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].gender`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'nationality' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"nationality\")){\n          if(pm.response.json().passengerDetails[i].nationality != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].nationality`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'disabledPerson' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"disabledPerson\")){\n          if(pm.response.json().passengerDetails[i].disabledPerson != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].disabledPerson`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'id' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().passengerDetails[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].id`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengerDetails[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'uuid' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"uuid\")){\n          if(pm.response.json().passengerDetails[i].uuid != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].uuid`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().passengerDetails[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound\")){\n          if(responseData.outbound!=null){\n            pm.expect(typeof _.get(responseData, \"outbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.journeyCode\")){\n          if(responseData.outbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalPort\")){\n          if(responseData.outbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondArrivalPort\")){\n          if(responseData.outbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureCode\")){\n          if(responseData.outbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departurePort\")){\n          if(responseData.outbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondDeparturePort\")){\n          if(responseData.outbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureDate\")){\n          if(responseData.outbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalDate\")){\n          if(responseData.outbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket\")){\n          if(responseData.outbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.fareType\")){\n          if(responseData.outbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `outbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.ticketCode\")){\n          if(responseData.outbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `outbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.passengerPrices\")){\n            if(responseData.outbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"outbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.cabins\")){\n            if(responseData.outbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"outbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().outbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().outbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshore\")){\n            if(responseData.outbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"outbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshoreWithOptions\")){\n            if(responseData.outbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasOnboard\")){\n            if(responseData.outbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"outbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.meals\")){\n            if(responseData.outbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"outbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().outbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().outbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.vehicles\")){\n            if(responseData.outbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"outbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().outbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().outbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().outbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.vesselCode\")){\n          if(responseData.outbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound\")){\n          if(responseData.inbound!=null){\n            pm.expect(typeof _.get(responseData, \"inbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.journeyCode\")){\n          if(responseData.inbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalPort\")){\n          if(responseData.inbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondArrivalPort\")){\n          if(responseData.inbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureCode\")){\n          if(responseData.inbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departurePort\")){\n          if(responseData.inbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondDeparturePort\")){\n          if(responseData.inbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureDate\")){\n          if(responseData.inbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalDate\")){\n          if(responseData.inbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket\")){\n          if(responseData.inbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.fareType\")){\n          if(responseData.inbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `inbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.ticketCode\")){\n          if(responseData.inbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `inbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.passengerPrices\")){\n            if(responseData.inbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"inbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.cabins\")){\n            if(responseData.inbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"inbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().inbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().inbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshore\")){\n            if(responseData.inbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"inbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshoreWithOptions\")){\n            if(responseData.inbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasOnboard\")){\n            if(responseData.inbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"inbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.meals\")){\n            if(responseData.inbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"inbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().inbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().inbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.vehicles\")){\n            if(responseData.inbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"inbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().inbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().inbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().inbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `inbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.vesselCode\")){\n          if(responseData.inbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasVehicle` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasVehicle\")){\n          if(responseData.hasVehicle!=null){\n            pm.expect(typeof _.get(responseData, \"hasVehicle\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasPet` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasPet\")){\n          if(responseData.hasPet!=null){\n            pm.expect(typeof _.get(responseData, \"hasPet\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `agencyId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"agencyId\")){\n          if(responseData.agencyId!=null){\n            pm.expect(typeof _.get(responseData, \"agencyId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `userId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"userId\")){\n          if(responseData.userId!=null){\n            pm.expect(typeof _.get(responseData, \"userId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `connectionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"connectionId\")){\n          if(responseData.connectionId!=null){\n            pm.expect(typeof _.get(responseData, \"connectionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf(ACTIVE,BOOKED,DELETED,EXPIRED,BOOKING_IN_PROGRESS);\n\n      pm.test('Response has the `bookingResult` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult\")){\n          if(responseData.bookingResult!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.created` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.created\")){\n          if(responseData.bookingResult.created!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.created\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingCode\")){\n          if(responseData.bookingResult.bookingCode!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingState\")){\n          if(responseData.bookingResult.bookingState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingBalance` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingBalance\")){\n          if(responseData.bookingResult.bookingBalance!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingBalance\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingTotal` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingTotal\")){\n          if(responseData.bookingResult.bookingTotal!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingTotal\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paidState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paidState\")){\n          if(responseData.bookingResult.paidState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paidState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.currency\")){\n          if(responseData.bookingResult.currency!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentUrl\")){\n          if(responseData.bookingResult.paymentUrl!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentSessionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentSessionId\")){\n          if(responseData.bookingResult.paymentSessionId!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentSessionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookedItems` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems\")){\n          if(responseData.bookingResult.bookedItems!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookedItems\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `bookingResult.bookedItems.groupPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\")){\n            if(responseData.bookingResult.bookedItems.groupPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.groupPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\");  \n          let groupPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\", \"\");  \n          for (let i = 0; i < groupPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.outboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\");  \n          let outboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\");  \n          for (let i = 0; i < outboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.inboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\");  \n          let inboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\");  \n          for (let i = 0; i < inboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.outboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\");  \n          let outboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\", \"\");  \n          for (let i = 0; i < outboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.inboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\");  \n          let inboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\", \"\");  \n          for (let i = 0; i < inboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\")){\n            if(responseData.bookingResult.bookedItems.outboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\");  \n          let outboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\");  \n          for (let i = 0; i < outboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\")){\n            if(responseData.bookingResult.bookedItems.inboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\");  \n          let inboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\");  \n          for (let i = 0; i < inboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\")){\n            if(responseData.bookingResult.bookedItems.outboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\");  \n          let outboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\", \"\");  \n          for (let i = 0; i < outboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\")){\n            if(responseData.bookingResult.bookedItems.inboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\");  \n          let inboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\", \"\");  \n          for (let i = 0; i < inboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\")){\n            if(responseData.bookingResult.bookedItems.outboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\");  \n          let outboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\");  \n          for (let i = 0; i < outboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\")){\n            if(responseData.bookingResult.bookedItems.inboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\");  \n          let inboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\");  \n          for (let i = 0; i < inboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.outboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\");  \n          let outboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\", \"\");  \n          for (let i = 0; i < outboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.inboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\");  \n          let inboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\", \"\");  \n          for (let i = 0; i < inboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n        pm.test('Response has the `timestamp` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"timestamp\")){\n            if(responseData.timestamp!=null){\n              pm.expect(typeof _.get(responseData, \"timestamp\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `packageCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"packageCode\")){\n          if(responseData.packageCode!=null){\n            pm.expect(typeof _.get(responseData, \"packageCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `referralCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"referralCode\")){\n          if(responseData.referralCode!=null){\n            pm.expect(typeof _.get(responseData, \"referralCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `voucherCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"voucherCode\")){\n          if(responseData.voucherCode!=null){\n            pm.expect(typeof _.get(responseData, \"voucherCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookCode\")){\n          if(responseData.ticketBookCode!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookPassword` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookPassword\")){\n          if(responseData.ticketBookPassword!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookPassword\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `accommodations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"accommodations\")){\n            if(responseData.accommodations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"accommodations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `accommodations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"accommodations\");  \n          let accommodationsArray = _.get(pm.response.json(), \"accommodations\", \"\");  \n          for (let i = 0; i < accommodationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'accommodations' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().accommodations[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().accommodations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkinDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkinDate\")){\n          if(pm.response.json().accommodations[i].checkinDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkinDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkoutDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkoutDate\")){\n          if(pm.response.json().accommodations[i].checkoutDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkoutDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'accommodations' has 'rooms' as an array`,function(){ \n          if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"rooms\")){\n            if(pm.response.json().accommodations[i].rooms != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `accommodations[${i}].rooms`))).to.equal(true);\n            }\n          }\n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `showOnlyTotalPrice` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"showOnlyTotalPrice\")){\n          if(responseData.showOnlyTotalPrice!=null){\n            pm.expect(typeof _.get(responseData, \"showOnlyTotalPrice\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `paymentMethod` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"paymentMethod\")){\n          if(responseData.paymentMethod!=null){\n            pm.expect(typeof _.get(responseData, \"paymentMethod\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"paymentMethod\", \"\")).to.be.oneOf(CREDIT_CARD,VOUCHER,CLUB_POINTS,TICKET_BOOK);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "be440c50-4c19-45be-873e-fb8262f1bead",
      "name": "/delete-cart/:id",
      "request": {
        "name": "/delete-cart/:id",
        "description": {},
        "url": {
          "path": [
            "delete-cart",
            ":id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "type": "any",
              "value": "{{id}}",
              "key": "id",
              "description": "(Required) "
            }
          ]
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": null
      },
      "response": [
        {
          "id": "49af6d92-e88d-4c7d-a72c-f2ca7a8294b6",
          "name": "Success",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"urn:uuid:02be5415-11dc-3d2d-cef4-55733c5de7a8\",\n  \"language\": \"in aliqua id consequat Excepteur\",\n  \"currency\": \"NOK\",\n  \"price\": {\n    \"currency\": \"EUR\",\n    \"value\": 31392501.2537359,\n    \"available\": true\n  },\n  \"journeyType\": \"PACKAGE\",\n  \"passengers\": [\n    {\n      \"code\": \"BABY\",\n      \"quantity\": 89435543\n    },\n    {\n      \"code\": \"ADULT\",\n      \"quantity\": -76988\n    }\n  ],\n  \"contactPerson\": {\n    \"contactInfo\": {\n      \"address\": \"dolore tempor pariatur Duis\",\n      \"city\": \"aliquip\",\n      \"country\": \"AF\",\n      \"email\": \"ut occaecat\",\n      \"mobile\": \"ut amet\",\n      \"zip\": \"est proident ex\"\n    },\n    \"birthYear\": -62756620,\n    \"birthMonth\": 33010034,\n    \"birthDay\": -45674879,\n    \"firstName\": \"ex ea\",\n    \"lastName\": \"dolore minim dolor enim\",\n    \"memberNumber\": \"enim in dolore incididunt\",\n    \"redeemableClubPoints\": -68641790.32820337,\n    \"customerCode\": \"sint in commodo\",\n    \"gender\": \"ORGANIZATION\",\n    \"nationality\": \"GB\"\n  },\n  \"passengerDetails\": [\n    {\n      \"contactInfo\": {\n        \"address\": \"dolor ullamco nulla Lorem\",\n        \"city\": \"paria\",\n        \"country\": \"SI\",\n        \"email\": \"id\",\n        \"mobile\": \"sit\",\n        \"zip\": \"laboris\"\n      },\n      \"birthYear\": 40725133,\n      \"birthMonth\": 77390610,\n      \"birthDay\": 22339149,\n      \"firstName\": \"enim Excepteur\",\n      \"lastName\": \"Duis velit\",\n      \"memberNumber\": \"quis exercitation anim minim in\",\n      \"redeemableClubPoints\": 12939854.991682515,\n      \"customerCode\": \"in aute do\",\n      \"gender\": \"ORGANIZATION\",\n      \"nationality\": \"KM\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"PASSPORT\",\n        \"idNumber\": \"n\"\n      },\n      \"code\": \"CHILD\",\n      \"uuid\": \"consequat labore ad\",\n      \"bookedItemReference\": \"veniam id\"\n    },\n    {\n      \"contactInfo\": {\n        \"address\": \"veniam ipsum au\",\n        \"city\": \"in sint ut\",\n        \"country\": \"US\",\n        \"email\": \"commodo sunt ut reprehenderit\",\n        \"mobile\": \"consequat in nulla\",\n        \"zip\": \"dolor dolor consectetur deserunt pariatur\"\n      },\n      \"birthYear\": -75548936,\n      \"birthMonth\": -44126099,\n      \"birthDay\": 98877869,\n      \"firstName\": \"sed mollit Duis ad\",\n      \"lastName\": \"tempor commodo est nostrud\",\n      \"memberNumber\": \"veniam ut\",\n      \"redeemableClubPoints\": 21859417.27822742,\n      \"customerCode\": \"Duis ut occaecat eu\",\n      \"gender\": \"UNSPECIFIED\",\n      \"nationality\": \"IQ\",\n      \"disabledPerson\": true,\n      \"id\": {\n        \"idType\": \"NATIONAL_ID\",\n        \"idNumber\": \"consequat eu esse labore ex\"\n      },\n      \"code\": \"INFANT\",\n      \"uuid\": \"fugiat sint enim nisi\",\n      \"bookedItemReference\": \"pariatur nostrud\"\n    }\n  ],\n  \"outbound\": {\n    \"journeyCode\": \"elit aute ullamco cupidatat cillum\",\n    \"arrivalPort\": \"SESMD\",\n    \"secondArrivalPort\": \"NOTRF\",\n    \"departureCode\": \"Lorem sit Excepteur qui\",\n    \"departurePort\": \"NOLAD\",\n    \"secondDeparturePort\": \"NOKRS\",\n    \"departureDate\": \"1977-05-31T10:48:52.675Z\",\n    \"arrivalDate\": \"1996-11-24T11:43:38.276Z\",\n    \"ticket\": {\n      \"fareType\": \"FLEX\",\n      \"ticketCode\": \"magna fugiat officia\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"INFANT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -24192955.072604284,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -99027769.13435134,\n          \"available\": false\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"officia ex elit enim\",\n        \"edit\": \"dolor reprehenderit et Ut Duis\",\n        \"id\": \"officia ut aliquip sed\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 83367825.14861628,\n          \"available\": true\n        },\n        \"quantityInCabin\": -3247,\n        \"subCode\": \"amet labore\",\n        \"bookedItemReference\": \"officia\",\n        \"isAttachment\": false\n      },\n      {\n        \"code\": \"aute Ut fugiat dolor\",\n        \"edit\": \"quis ea sint\",\n        \"id\": \"adipisicin\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -81549770.4138779,\n          \"available\": true\n        },\n        \"quantityInCabin\": -49035788,\n        \"subCode\": \"nulla voluptate\",\n        \"bookedItemReference\": \"eu nisi sunt incidi\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"ex eu\",\n        \"quantity\": 47267295,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 22214025.278311223,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"pariatur est\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"eiusmod ali\",\n        \"startTime\": \"1961-05-16T11:12:41.678Z\"\n      },\n      {\n        \"code\": \"dolor\",\n        \"quantity\": 2209668,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -19077227.897390485,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nostrud Duis \",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"tempor eiusmod\",\n        \"startTime\": \"1970-02-12T16:27:09.744Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"eiusmod aliquip dolor\",\n        \"quantity\": -36535878,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 14418982.505641684,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"laborum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"sunt in ex\",\n        \"startTime\": \"2015-12-03T08:08:52.349Z\"\n      },\n      {\n        \"code\": \"et nisi est sit\",\n        \"quantity\": 65453511,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 86462876.88999516,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"consectetur nostrud culpa \",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"aliquip laboris sit labore\",\n        \"startTime\": \"1983-12-08T07:05:03.397Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"proident\",\n        \"quantity\": -64544680,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -22394111.809110045,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ips\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ut aliquip ut\",\n        \"startTime\": \"1975-02-18T19:42:50.826Z\"\n      },\n      {\n        \"code\": \"quis enim ad qui\",\n        \"quantity\": 52198080,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": -86148372.26006764,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"Lorem tempor nulla sit\",\n        \"startTime\": \"2018-01-13T07:54:48.705Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"Duis adipisicing quis\",\n        \"quantity\": 78811281,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -23995004.53819421,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"non conse\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Excepteur cillum \",\n        \"startTime\": \"2013-11-10T01:52:34.409Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"id\"\n      },\n      {\n        \"code\": \"elit\",\n        \"quantity\": -28472161,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 46132024.23821953,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nulla in mo\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ut dolore commodo\",\n        \"startTime\": \"1970-08-09T05:19:57.610Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"sed \"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"adipisicing do\",\n        \"quantity\": -80261438,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -91276093.69472736,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"in aliquip nisi eiusmod\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"Ut sed\",\n        \"length\": 86725515.84768108,\n        \"hasTrailer\": false,\n        \"id\": \"Ut Duis fugiat laborum ea\"\n      },\n      {\n        \"code\": \"adipisicing labore cupidatat do laborum\",\n        \"quantity\": 18356574,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 91577675.9711357,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"minim est voluptate ut\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"c\",\n        \"length\": 7939336.432332799,\n        \"hasTrailer\": true,\n        \"id\": \"dolore ullamco nostrud do cillum\"\n      }\n    ],\n    \"vesselCode\": \"non id ea nulla\"\n  },\n  \"inbound\": {\n    \"journeyCode\": \"\",\n    \"arrivalPort\": \"DKCPH\",\n    \"secondArrivalPort\": \"NOTRF\",\n    \"departureCode\": \"eu Duis deserunt\",\n    \"departurePort\": \"DKHIR\",\n    \"secondDeparturePort\": \"NOSVG\",\n    \"departureDate\": \"1958-05-30T06:57:48.682Z\",\n    \"arrivalDate\": \"2019-08-15T17:31:03.293Z\",\n    \"ticket\": {\n      \"fareType\": \"CRUISE_ASHORE\",\n      \"ticketCode\": \"ullamco fugiat laborum velit\"\n    },\n    \"passengerPrices\": [\n      {\n        \"code\": \"INFANT\",\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -34102005.98397339,\n          \"available\": false\n        }\n      },\n      {\n        \"code\": \"CHILD\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 40471090.98133293,\n          \"available\": true\n        }\n      }\n    ],\n    \"cabins\": [\n      {\n        \"code\": \"dolore dolore velit ex\",\n        \"edit\": \"anim mollit\",\n        \"id\": \"eu\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 18573293.220338047,\n          \"available\": true\n        },\n        \"quantityInCabin\": 62540258,\n        \"subCode\": \"magna Duis\",\n        \"bookedItemReference\": \"reprehenderit dolor ex velit\",\n        \"isAttachment\": true\n      },\n      {\n        \"code\": \"est commodo\",\n        \"edit\": \"cupidatat\",\n        \"id\": \"esse\",\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -76572173.6341682,\n          \"available\": true\n        },\n        \"quantityInCabin\": -32949292,\n        \"subCode\": \"magna est\",\n        \"bookedItemReference\": \"laboris\",\n        \"isAttachment\": false\n      }\n    ],\n    \"extrasAshore\": [\n      {\n        \"code\": \"ullamco Duis officia ut\",\n        \"quantity\": 51386926,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -17422736.149391353,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"irure Duis reprehenderit magna proident\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"enim voluptate\",\n        \"startTime\": \"2023-06-20T10:28:32.851Z\"\n      },\n      {\n        \"code\": \"do in\",\n        \"quantity\": -21996436,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -24306287.700249568,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ullamco ex mollit\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"exercitation nostrud sunt enim\",\n        \"startTime\": \"2021-04-14T21:06:26.079Z\"\n      }\n    ],\n    \"extrasAshoreWithOptions\": [\n      {\n        \"code\": \"sit mollit voluptate\",\n        \"quantity\": 23251225,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": 96657351.65944839,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"ut\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"id ut et Excepteur Duis\",\n        \"startTime\": \"1986-08-22T07:08:32.955Z\"\n      },\n      {\n        \"code\": \"minim aute tempor\",\n        \"quantity\": -28753198,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": -61245576.8941909,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"exercitation ad laborum ipsum\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"Lorem sed id labore\",\n        \"startTime\": \"1948-02-25T03:09:40.001Z\"\n      }\n    ],\n    \"extrasOnboard\": [\n      {\n        \"code\": \"veniam magna i\",\n        \"quantity\": -48963628,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 40264580.302016884,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"esse sunt\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"nisi\",\n        \"startTime\": \"1979-04-17T20:53:28.714Z\"\n      },\n      {\n        \"code\": \"commodo dolore\",\n        \"quantity\": 34777311,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 44604023.03572604,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"id deserunt mollit ut ipsum\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"ex tempor magna in\",\n        \"startTime\": \"1951-08-28T15:06:48.667Z\"\n      }\n    ],\n    \"meals\": [\n      {\n        \"code\": \"do quis\",\n        \"quantity\": 10540792,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -63162573.36872311,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"cupidatat aliquip\",\n        \"isAttachment\": true,\n        \"attachmentIsPerPassenger\": true,\n        \"subCode\": \"voluptate aute dolore velit\",\n        \"startTime\": \"1992-11-26T21:45:05.948Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"consequat magna al\"\n      },\n      {\n        \"code\": \"id\",\n        \"quantity\": 69574293,\n        \"price\": {\n          \"currency\": \"EUR\",\n          \"value\": 69094505.37496674,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"nisi\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"subCode\": \"fugiat\",\n        \"startTime\": \"1978-06-23T16:28:48.774Z\",\n        \"isOutbound\": true,\n        \"legCode\": \"eiusmod ut exercitation qui consectetur\"\n      }\n    ],\n    \"vehicles\": [\n      {\n        \"code\": \"nisi dolor dolor\",\n        \"quantity\": 16086273,\n        \"price\": {\n          \"currency\": \"NOK\",\n          \"value\": 27620052.8179134,\n          \"available\": true\n        },\n        \"bookedItemReference\": \"aliquip\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": true,\n        \"regNum\": \"do id proident voluptate dolore\",\n        \"length\": 13479526.979051396,\n        \"hasTrailer\": false,\n        \"id\": \"dolore mollit exerc\"\n      },\n      {\n        \"code\": \"cillum exercitation est eiusmod\",\n        \"quantity\": -25628874,\n        \"price\": {\n          \"currency\": \"DKK\",\n          \"value\": -68390113.21665232,\n          \"available\": false\n        },\n        \"bookedItemReference\": \"ullamco\",\n        \"isAttachment\": false,\n        \"attachmentIsPerPassenger\": false,\n        \"regNum\": \"dolore \",\n        \"length\": -4950200.374140084,\n        \"hasTrailer\": true,\n        \"id\": \"aliquip ullamco dolore magna\"\n      }\n    ],\n    \"vesselCode\": \"proident enim est adipisicing fugiat\"\n  },\n  \"hasVehicle\": false,\n  \"hasPet\": false,\n  \"agencyId\": \"cillum Ut anim\",\n  \"userId\": \"dolor eu\",\n  \"connectionId\": \"laboris aute\",\n  \"status\": \"BOOKING_IN_PROGRESS\",\n  \"bookingResult\": {\n    \"created\": \"1954-04-30T08:21:21.463Z\",\n    \"bookingCode\": \"consectetur labore\",\n    \"bookingState\": \"labore fugiat minim consectetur\",\n    \"bookingBalance\": \"velit\",\n    \"bookingTotal\": \"non\",\n    \"paidState\": \"nostrud consequat non sed\",\n    \"currency\": \"Lorem consequat\",\n    \"paymentUrl\": \"deserunt minim officia sed\",\n    \"paymentSessionId\": \"ex te\",\n    \"bookedItems\": {\n      \"groupPrices\": [\n        {\n          \"name\": \"minim\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"name\": \"nisi\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundPassengerPrices\": [\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"ADULT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"inboundPassengerPrices\": [\n        {\n          \"code\": \"CHILD\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        },\n        {\n          \"code\": \"INFANT\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        }\n      ],\n      \"outboundVehicles\": [\n        {\n          \"code\": \"pariatur incididunt\",\n          \"quantity\": -86521403,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla consectetur non\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"Ut irure enim\",\n          \"length\": -80896131.48658583,\n          \"hasTrailer\": false,\n          \"id\": \"esse ipsum id\"\n        },\n        {\n          \"code\": \"qui exercitation velit e\",\n          \"quantity\": -61933473,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla reprehenderit velit\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"enim\",\n          \"length\": 78359305.56698546,\n          \"hasTrailer\": true,\n          \"id\": \"tempor amet\"\n        }\n      ],\n      \"inboundVehicles\": [\n        {\n          \"code\": \"sit esse veniam reprehenderit\",\n          \"quantity\": 43368949,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ut minim\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"pariatur\",\n          \"length\": -79341688.40319508,\n          \"hasTrailer\": false,\n          \"id\": \"labore dolore commodo non minim\"\n        },\n        {\n          \"code\": \"id\",\n          \"quantity\": -15665136,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"cillum esse\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"regNum\": \"quis Ut\",\n          \"length\": -15831732.689881936,\n          \"hasTrailer\": true,\n          \"id\": \"incididunt commodo\"\n        }\n      ],\n      \"outboundMeals\": [\n        {\n          \"code\": \"Ut ipsum\",\n          \"quantity\": -68760344,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nulla minim\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"magna in pariatur in sunt\",\n          \"startTime\": \"1945-01-04T07:32:11.228Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"a\"\n        },\n        {\n          \"code\": \"qui mollit pariatur\",\n          \"quantity\": -86690854,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"qui cupidatat non\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"tempor dolore\",\n          \"startTime\": \"1999-07-19T17:53:53.539Z\",\n          \"isOutbound\": false,\n          \"legCode\": \"Ut dolo\"\n        }\n      ],\n      \"inboundMeals\": [\n        {\n          \"code\": \"sit aliqua est velit\",\n          \"quantity\": -98625874,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"magna ipsum sunt\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": false,\n          \"subCode\": \"qui\",\n          \"startTime\": \"1993-07-01T02:12:49.835Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"esse fugiat\"\n        },\n        {\n          \"code\": \"non consequat\",\n          \"quantity\": 30348646,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"esse laboru\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"est Excepteur\",\n          \"startTime\": \"1978-08-08T13:01:29.464Z\",\n          \"isOutbound\": true,\n          \"legCode\": \"nisi labo\"\n        }\n      ],\n      \"outboundCabins\": [\n        {\n          \"code\": \"i\",\n          \"edit\": \"tempor sit\",\n          \"id\": \"ad eiusmod deserunt tempor\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -50345720,\n          \"subCode\": \"ex est\",\n          \"bookedItemReference\": \"id in\",\n          \"isAttachment\": true\n        },\n        {\n          \"code\": \"quis\",\n          \"edit\": \"sunt\",\n          \"id\": \"esse mollit magna adipisicing\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": -43413915,\n          \"subCode\": \"id commodo\",\n          \"bookedItemReference\": \"voluptate magna in incididunt\",\n          \"isAttachment\": true\n        }\n      ],\n      \"inboundCabins\": [\n        {\n          \"code\": \"in consectetur sint\",\n          \"edit\": \"ut deserunt sit dolor\",\n          \"id\": \"magna culpa\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 40680366,\n          \"subCode\": \"dolor veniam irure\",\n          \"bookedItemReference\": \"minim voluptate\",\n          \"isAttachment\": false\n        },\n        {\n          \"code\": \"dolor pariatur magna officia\",\n          \"edit\": \"eiusmod tempor\",\n          \"id\": \"am\",\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"quantityInCabin\": 44376285,\n          \"subCode\": \"ut culpa sunt occaecat cupidatat\",\n          \"bookedItemReference\": \"ad id\",\n          \"isAttachment\": false\n        }\n      ],\n      \"outboundExtras\": [\n        {\n          \"code\": \"consequat non\",\n          \"quantity\": 82312805,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"eu commodo occaecat nostr\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"exercitation incididunt\",\n          \"startTime\": \"1997-07-30T10:10:27.945Z\"\n        },\n        {\n          \"code\": \"aute pariatur dolor\",\n          \"quantity\": 91869519,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"in reprehenderit fugiat aliquip\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"adipisicing exercitation velit voluptate in\",\n          \"startTime\": \"1986-07-10T15:30:38.297Z\"\n        }\n      ],\n      \"inboundExtras\": [\n        {\n          \"code\": \"nisi tempor ipsum\",\n          \"quantity\": -98136352,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"pariat\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"Lorem occaecat tempor et\",\n          \"startTime\": \"2005-01-15T06:28:56.727Z\"\n        },\n        {\n          \"code\": \"fugiat eiusmod ad officia \",\n          \"quantity\": -15595719,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"reprehenderit adipisicing aliquip culpa esse\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true,\n          \"subCode\": \"Excepteur\",\n          \"startTime\": \"1962-04-16T09:14:10.601Z\"\n        }\n      ],\n      \"outboundDiscounts\": [\n        {\n          \"code\": \"officia veniam incididunt\",\n          \"quantity\": -27444640,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"laborum\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": true\n        },\n        {\n          \"code\": \"in dolore sunt\",\n          \"quantity\": 54957095,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"velit amet labore quis est\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false\n        }\n      ],\n      \"inboundDiscounts\": [\n        {\n          \"code\": \"labore irure aliqua officia enim\",\n          \"quantity\": 21104924,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"ut eiusmod\",\n          \"isAttachment\": true,\n          \"attachmentIsPerPassenger\": false\n        },\n        {\n          \"code\": \"dolore\",\n          \"quantity\": -6993371,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"available\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"bookedItemReference\": \"nisi veniam\",\n          \"isAttachment\": false,\n          \"attachmentIsPerPassenger\": true\n        }\n      ]\n    }\n  },\n  \"timestamp\": 59923045,\n  \"packageCode\": \"aliquip\",\n  \"referralCode\": \"minim eiusmod in sit\",\n  \"voucherCode\": \"sint id esse culpa\",\n  \"ticketBookCode\": \"aute ea in sint\",\n  \"ticketBookPassword\": \"sed ali\",\n  \"accommodations\": [\n    {\n      \"code\": \"labore in ut culpa\",\n      \"name\": \"cillum ut dolor laborum\",\n      \"checkinDate\": \"1983-04-22T08:05:24.825Z\",\n      \"checkoutDate\": \"2008-03-29T12:16:25.672Z\",\n      \"rooms\": [\n        {\n          \"name\": \"id dolore magna occaecat deserunt\",\n          \"code\": \"non sed sint exercitation\",\n          \"quantity\": -34318759,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 83783257.09769231,\n            \"available\": false\n          }\n        },\n        {\n          \"name\": \"incididunt elit\",\n          \"code\": \"consequat exerc\",\n          \"quantity\": 84419117,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -12305592.547409236,\n            \"available\": true\n          }\n        }\n      ]\n    },\n    {\n      \"code\": \"in id ipsum in magna\",\n      \"name\": \"anim aliqua\",\n      \"checkinDate\": \"1991-08-20T15:31:40.171Z\",\n      \"checkoutDate\": \"1952-08-26T06:44:00.573Z\",\n      \"rooms\": [\n        {\n          \"name\": \"pariatur quis\",\n          \"code\": \"nisi labore\",\n          \"quantity\": -90550212,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": -43939942.18258377,\n            \"available\": true\n          }\n        },\n        {\n          \"name\": \"Duis occaecat ullamco eu\",\n          \"code\": \"eu mollit\",\n          \"quantity\": -60544324,\n          \"price\": {\n            \"currency\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": 20406654.68599783,\n            \"available\": true\n          }\n        }\n      ]\n    }\n  ],\n  \"showOnlyTotalPrice\": true,\n  \"paymentMethod\": \"VOUCHER\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f81dd315-4c18-46c2-9680-995719cdee80",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "39f92050-6ced-4fe9-b5b9-020b9e0fe3d8",
          "name": "Unauthorized",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "19525c5c-57e0-45b4-9475-c023813c8bc0",
          "name": "Forbidden",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "066ba8d4-20dc-4b1d-a40e-230fa36a8f18",
          "name": "Not Found",
          "originalRequest": {
            "url": {
              "path": [
                "delete-cart",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) "
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "disabled": false,
                "description": "(Required) ",
                "key": "Authorization",
                "value": "{{Authorization}}"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// Test generated by RoostGPT for test api-spec-upload using AI Type Open AI and AI Model gpt-4\n\n\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"Success\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n      pm.test('Response has the `id` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"id\")){\n          if(responseData.id!=null){\n            pm.expect(typeof _.get(responseData, \"id\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `language` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"language\")){\n          if(responseData.language!=null){\n            pm.expect(typeof _.get(responseData, \"language\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"currency\")){\n          if(responseData.currency!=null){\n            pm.expect(typeof _.get(responseData, \"currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price\")){\n          if(responseData.price!=null){\n            pm.expect(typeof _.get(responseData, \"price\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.currency\")){\n          if(responseData.price.currency!=null){\n            pm.expect(typeof _.get(responseData, \"price.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"price.currency\", \"\")).to.be.oneOf(NOK,DKK,EUR);\n\n      pm.test('Response has the `price.value` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.value\")){\n          if(responseData.price.value!=null){\n            pm.expect(typeof _.get(responseData, \"price.value\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `price.available` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"price.available\")){\n          if(responseData.price.available!=null){\n            pm.expect(typeof _.get(responseData, \"price.available\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `journeyType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"journeyType\")){\n          if(responseData.journeyType!=null){\n            pm.expect(typeof _.get(responseData, \"journeyType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"journeyType\", \"\")).to.be.oneOf(ONEWAY,RETURN,CRUISE,PACKAGE);\n      \n        pm.test('Response has the `passengers` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengers\")){\n            if(responseData.passengers!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengers\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengers` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengers\");  \n          let passengersArray = _.get(pm.response.json(), \"passengers\", \"\");  \n          for (let i = 0; i < passengersArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengers' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengers[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengers\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n        pm.test(`${i} element of array 'passengers' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().passengers[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().passengers[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengers[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `contactPerson` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson\")){\n          if(responseData.contactPerson!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo\")){\n          if(responseData.contactPerson.contactInfo!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.address` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.address\")){\n          if(responseData.contactPerson.contactInfo.address!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.address\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.city` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.city\")){\n          if(responseData.contactPerson.contactInfo.city!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.city\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.country` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.country\")){\n          if(responseData.contactPerson.contactInfo.country!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.country\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.contactInfo.country\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test('Response has the `contactPerson.contactInfo.email` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.email\")){\n          if(responseData.contactPerson.contactInfo.email!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.email\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.mobile` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.mobile\")){\n          if(responseData.contactPerson.contactInfo.mobile!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.mobile\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.contactInfo.zip` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.contactInfo.zip\")){\n          if(responseData.contactPerson.contactInfo.zip!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.contactInfo.zip\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n        pm.test('Response has the `contactPerson.birthYear` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthYear\")){\n            if(responseData.contactPerson.birthYear!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthYear\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthMonth` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthMonth\")){\n            if(responseData.contactPerson.birthMonth!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthMonth\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n        pm.test('Response has the `contactPerson.birthDay` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"contactPerson.birthDay\")){\n            if(responseData.contactPerson.birthDay!=null){\n              pm.expect(typeof _.get(responseData, \"contactPerson.birthDay\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `contactPerson.firstName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.firstName\")){\n          if(responseData.contactPerson.firstName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.firstName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.lastName` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.lastName\")){\n          if(responseData.contactPerson.lastName!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.lastName\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.memberNumber` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.memberNumber\")){\n          if(responseData.contactPerson.memberNumber!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.memberNumber\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.redeemableClubPoints` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.redeemableClubPoints\")){\n          if(responseData.contactPerson.redeemableClubPoints!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.redeemableClubPoints\", 200)).to.equal(\"number\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.customerCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.customerCode\")){\n          if(responseData.contactPerson.customerCode!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.customerCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `contactPerson.gender` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.gender\")){\n          if(responseData.contactPerson.gender!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.gender\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.gender\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test('Response has the `contactPerson.nationality` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"contactPerson.nationality\")){\n          if(responseData.contactPerson.nationality!=null){\n            pm.expect(typeof _.get(responseData, \"contactPerson.nationality\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"contactPerson.nationality\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n      \n        pm.test('Response has the `passengerDetails` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"passengerDetails\")){\n            if(responseData.passengerDetails!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"passengerDetails\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `passengerDetails` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"passengerDetails\");  \n          let passengerDetailsArray = _.get(pm.response.json(), \"passengerDetails\", \"\");  \n          for (let i = 0; i < passengerDetailsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'passengerDetails' has 'contactInfo' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"contactInfo\")){\n          if(pm.response.json().passengerDetails[i].contactInfo != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].contactInfo`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthYear' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthYear\")){\n            if(pm.response.json().passengerDetails[i].birthYear != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthYear`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthMonth' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthMonth\")){\n            if(pm.response.json().passengerDetails[i].birthMonth != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthMonth`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n        pm.test(`${i} element of array 'passengerDetails' has 'birthDay' as number`,function(){  \n          if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"birthDay\")){\n            if(pm.response.json().passengerDetails[i].birthDay != null ){\n              pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].birthDay`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'passengerDetails' has 'firstName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"firstName\")){\n          if(pm.response.json().passengerDetails[i].firstName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].firstName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'lastName' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"lastName\")){\n          if(pm.response.json().passengerDetails[i].lastName != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].lastName`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'memberNumber' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"memberNumber\")){\n          if(pm.response.json().passengerDetails[i].memberNumber != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].memberNumber`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'redeemableClubPoints' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"redeemableClubPoints\")){\n          if(pm.response.json().passengerDetails[i].redeemableClubPoints != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].redeemableClubPoints`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'customerCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"customerCode\")){\n          if(pm.response.json().passengerDetails[i].customerCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].customerCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'gender' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"gender\")){\n          if(pm.response.json().passengerDetails[i].gender != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].gender`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(UNSPECIFIED,MALE,FEMALE,ORGANIZATION,UNKNOWN);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'nationality' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"nationality\")){\n          if(pm.response.json().passengerDetails[i].nationality != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].nationality`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(AD,AE,AF,AG,AL,AM,AO,AR,AT,AU,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BN,BO,BR,BS,BT,BW,BY,BZ,CA,CD,CF,CG,CH,CI,CL,CM,CN,CO,CR,CU,CV,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FO,FR,GA,GB,GD,GE,GH,GI,GM,GN,GQ,GR,GT,GW,GY,HK,HN,HR,HT,HU,ID,IE,IL,IN,IQ,IR,IS,IT,JM,JO,JP,KE,KG,KH,KI,KM,KP,KR,KW,KZ,LA,LB,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MG,MH,MK,ML,MM,MN,MO,MQ,MR,MT,MU,MV,MW,MX,MY,MZ,NA,NE,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SC,SD,SE,SG,SI,SK,SL,SM,SN,SO,SR,SS,ST,SV,SY,TD,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,US,UY,UZ,VE,VN,VU,WS,YE,ZA,ZM,ZW);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'disabledPerson' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"disabledPerson\")){\n          if(pm.response.json().passengerDetails[i].disabledPerson != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].disabledPerson`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'id' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().passengerDetails[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].id`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().passengerDetails[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"passengerDetails\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'passengerDetails' has 'uuid' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"uuid\")){\n          if(pm.response.json().passengerDetails[i].uuid != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].uuid`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'passengerDetails' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().passengerDetails[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().passengerDetails[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`passengerDetails[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound\")){\n          if(responseData.outbound!=null){\n            pm.expect(typeof _.get(responseData, \"outbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.journeyCode\")){\n          if(responseData.outbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalPort\")){\n          if(responseData.outbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondArrivalPort\")){\n          if(responseData.outbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureCode\")){\n          if(responseData.outbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departurePort\")){\n          if(responseData.outbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.secondDeparturePort\")){\n          if(responseData.outbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `outbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.departureDate\")){\n          if(responseData.outbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.arrivalDate\")){\n          if(responseData.outbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket\")){\n          if(responseData.outbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `outbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.fareType\")){\n          if(responseData.outbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `outbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.ticket.ticketCode\")){\n          if(responseData.outbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `outbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.passengerPrices\")){\n            if(responseData.outbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"outbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"outbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'outbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.cabins\")){\n            if(responseData.outbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"outbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().outbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().outbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshore\")){\n            if(responseData.outbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"outbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasAshoreWithOptions\")){\n            if(responseData.outbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"outbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.extrasOnboard\")){\n            if(responseData.outbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"outbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.meals\")){\n            if(responseData.outbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"outbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().outbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().outbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().outbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().outbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `outbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"outbound.vehicles\")){\n            if(responseData.outbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"outbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `outbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"outbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"outbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'outbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().outbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'outbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().outbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().outbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().outbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().outbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().outbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().outbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().outbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().outbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'outbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().outbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().outbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`outbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `outbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"outbound.vesselCode\")){\n          if(responseData.outbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"outbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound\")){\n          if(responseData.inbound!=null){\n            pm.expect(typeof _.get(responseData, \"inbound\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.journeyCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.journeyCode\")){\n          if(responseData.inbound.journeyCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.journeyCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalPort\")){\n          if(responseData.inbound.arrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.arrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondArrivalPort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondArrivalPort\")){\n          if(responseData.inbound.secondArrivalPort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondArrivalPort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondArrivalPort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureCode\")){\n          if(responseData.inbound.departureCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.departurePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departurePort\")){\n          if(responseData.inbound.departurePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departurePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.departurePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.secondDeparturePort` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.secondDeparturePort\")){\n          if(responseData.inbound.secondDeparturePort!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.secondDeparturePort\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.secondDeparturePort\", \"\")).to.be.oneOf(NOLAD,NOBGO,DKHIR,NOSVG,SESMD,NOKRS,NOTRF,DKCPH);\n\n      pm.test('Response has the `inbound.departureDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.departureDate\")){\n          if(responseData.inbound.departureDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.departureDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.arrivalDate` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.arrivalDate\")){\n          if(responseData.inbound.arrivalDate!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.arrivalDate\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket\")){\n          if(responseData.inbound.ticket!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `inbound.ticket.fareType` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.fareType\")){\n          if(responseData.inbound.ticket.fareType!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.fareType\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.ticket.fareType\", \"\")).to.be.oneOf(ECONOMY,FJORDCLUB,FLEX,CRUISE_ONBOARD,CRUISE_ASHORE,CUSTOM);\n\n      pm.test('Response has the `inbound.ticket.ticketCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.ticket.ticketCode\")){\n          if(responseData.inbound.ticket.ticketCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.ticket.ticketCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `inbound.passengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.passengerPrices\")){\n            if(responseData.inbound.passengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.passengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.passengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.passengerPrices\");  \n          let passengerPricesArray = _.get(pm.response.json(), \"inbound.passengerPrices\", \"\");  \n          for (let i = 0; i < passengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.passengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"inbound.passengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'inbound.passengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.passengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.passengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.passengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.cabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.cabins\")){\n            if(responseData.inbound.cabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.cabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.cabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.cabins\");  \n          let cabinsArray = _.get(pm.response.json(), \"inbound.cabins\", \"\");  \n          for (let i = 0; i < cabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.cabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.cabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().inbound.cabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.cabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.cabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.cabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().inbound.cabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.cabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.cabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.cabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.cabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.cabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.cabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.cabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshore` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshore\")){\n            if(responseData.inbound.extrasAshore!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshore\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshore` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshore\");  \n          let extrasAshoreArray = _.get(pm.response.json(), \"inbound.extrasAshore\", \"\");  \n          for (let i = 0; i < extrasAshoreArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshore[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshore' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshore[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshore[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshore[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshore[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshore[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshore[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshore' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshore[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshore[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshore[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasAshoreWithOptions` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasAshoreWithOptions\")){\n            if(responseData.inbound.extrasAshoreWithOptions!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasAshoreWithOptions` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasAshoreWithOptions\");  \n          let extrasAshoreWithOptionsArray = _.get(pm.response.json(), \"inbound.extrasAshoreWithOptions\", \"\");  \n          for (let i = 0; i < extrasAshoreWithOptionsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasAshoreWithOptions[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasAshoreWithOptions' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasAshoreWithOptions[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasAshoreWithOptions[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasAshoreWithOptions[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.extrasOnboard` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.extrasOnboard\")){\n            if(responseData.inbound.extrasOnboard!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.extrasOnboard\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.extrasOnboard` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.extrasOnboard\");  \n          let extrasOnboardArray = _.get(pm.response.json(), \"inbound.extrasOnboard\", \"\");  \n          for (let i = 0; i < extrasOnboardArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.extrasOnboard[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.extrasOnboard' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.extrasOnboard[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.extrasOnboard[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.extrasOnboard[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.extrasOnboard[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.extrasOnboard[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.extrasOnboard[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.extrasOnboard' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.extrasOnboard[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.extrasOnboard[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.extrasOnboard[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.meals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.meals\")){\n            if(responseData.inbound.meals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.meals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.meals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.meals\");  \n          let mealsArray = _.get(pm.response.json(), \"inbound.meals\", \"\");  \n          for (let i = 0; i < mealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.meals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.meals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.meals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.meals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.meals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.meals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.meals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.meals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.meals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().inbound.meals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().inbound.meals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().inbound.meals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.meals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.meals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().inbound.meals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.meals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `inbound.vehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"inbound.vehicles\")){\n            if(responseData.inbound.vehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"inbound.vehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `inbound.vehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"inbound.vehicles\");  \n          let vehiclesArray = _.get(pm.response.json(), \"inbound.vehicles\", \"\");  \n          for (let i = 0; i < vehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'inbound.vehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().inbound.vehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'inbound.vehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().inbound.vehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().inbound.vehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().inbound.vehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().inbound.vehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().inbound.vehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().inbound.vehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().inbound.vehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().inbound.vehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'inbound.vehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().inbound.vehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().inbound.vehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`inbound.vehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n      pm.test('Response has the `inbound.vesselCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"inbound.vesselCode\")){\n          if(responseData.inbound.vesselCode!=null){\n            pm.expect(typeof _.get(responseData, \"inbound.vesselCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasVehicle` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasVehicle\")){\n          if(responseData.hasVehicle!=null){\n            pm.expect(typeof _.get(responseData, \"hasVehicle\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `hasPet` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"hasPet\")){\n          if(responseData.hasPet!=null){\n            pm.expect(typeof _.get(responseData, \"hasPet\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `agencyId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"agencyId\")){\n          if(responseData.agencyId!=null){\n            pm.expect(typeof _.get(responseData, \"agencyId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `userId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"userId\")){\n          if(responseData.userId!=null){\n            pm.expect(typeof _.get(responseData, \"userId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `connectionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"connectionId\")){\n          if(responseData.connectionId!=null){\n            pm.expect(typeof _.get(responseData, \"connectionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `status` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"status\")){\n          if(responseData.status!=null){\n            pm.expect(typeof _.get(responseData, \"status\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"status\", \"\")).to.be.oneOf(ACTIVE,BOOKED,DELETED,EXPIRED,BOOKING_IN_PROGRESS);\n\n      pm.test('Response has the `bookingResult` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult\")){\n          if(responseData.bookingResult!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.created` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.created\")){\n          if(responseData.bookingResult.created!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.created\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingCode\")){\n          if(responseData.bookingResult.bookingCode!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingState\")){\n          if(responseData.bookingResult.bookingState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingBalance` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingBalance\")){\n          if(responseData.bookingResult.bookingBalance!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingBalance\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookingTotal` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookingTotal\")){\n          if(responseData.bookingResult.bookingTotal!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookingTotal\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paidState` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paidState\")){\n          if(responseData.bookingResult.paidState!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paidState\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.currency` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.currency\")){\n          if(responseData.bookingResult.currency!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.currency\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentUrl` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentUrl\")){\n          if(responseData.bookingResult.paymentUrl!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentUrl\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.paymentSessionId` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.paymentSessionId\")){\n          if(responseData.bookingResult.paymentSessionId!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.paymentSessionId\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `bookingResult.bookedItems` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems\")){\n          if(responseData.bookingResult.bookedItems!=null){\n            pm.expect(typeof _.get(responseData, \"bookingResult.bookedItems\", 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `bookingResult.bookedItems.groupPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\")){\n            if(responseData.bookingResult.bookedItems.groupPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.groupPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.groupPrices\");  \n          let groupPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.groupPrices\", \"\");  \n          for (let i = 0; i < groupPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.groupPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.groupPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.groupPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.groupPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.outboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundPassengerPrices\");  \n          let outboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\");  \n          for (let i = 0; i < outboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundPassengerPrices` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\")){\n            if(responseData.bookingResult.bookedItems.inboundPassengerPrices!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundPassengerPrices` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundPassengerPrices\");  \n          let inboundPassengerPricesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\");  \n          for (let i = 0; i < inboundPassengerPricesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n        pm.expect(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundPassengerPrices\", \"\")).to.be.oneOf(ADULT,CHILD,INFANT,BABY);\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundPassengerPrices' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundPassengerPrices[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundPassengerPrices[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.outboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundVehicles\");  \n          let outboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundVehicles\", \"\");  \n          for (let i = 0; i < outboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundVehicles` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\")){\n            if(responseData.bookingResult.bookedItems.inboundVehicles!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundVehicles` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundVehicles\");  \n          let inboundVehiclesArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundVehicles\", \"\");  \n          for (let i = 0; i < inboundVehiclesArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'regNum' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"regNum\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].regNum != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].regNum`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'length' as 'number'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"length\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].length != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].length`, 200)).to.equal(\"number\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'hasTrailer' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"hasTrailer\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].hasTrailer != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].hasTrailer`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundVehicles' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundVehicles[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundVehicles[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundVehicles[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\")){\n            if(responseData.bookingResult.bookedItems.outboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundMeals\");  \n          let outboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundMeals\", \"\");  \n          for (let i = 0; i < outboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundMeals` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\")){\n            if(responseData.bookingResult.bookedItems.inboundMeals!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundMeals` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundMeals\");  \n          let inboundMealsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundMeals\", \"\");  \n          for (let i = 0; i < inboundMealsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'isOutbound' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"isOutbound\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].isOutbound != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].isOutbound`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundMeals' has 'legCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundMeals[i]).to.have.nested.property(\"legCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundMeals[i].legCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundMeals[${i}].legCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\")){\n            if(responseData.bookingResult.bookedItems.outboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundCabins\");  \n          let outboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundCabins\", \"\");  \n          for (let i = 0; i < outboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundCabins` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\")){\n            if(responseData.bookingResult.bookedItems.inboundCabins!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundCabins` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundCabins\");  \n          let inboundCabinsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundCabins\", \"\");  \n          for (let i = 0; i < inboundCabinsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'edit' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"edit\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].edit != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].edit`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'id' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"id\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].id != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].id`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'quantityInCabin' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"quantityInCabin\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].quantityInCabin != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].quantityInCabin`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundCabins' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundCabins[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundCabins[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundCabins[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\")){\n            if(responseData.bookingResult.bookedItems.outboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundExtras\");  \n          let outboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundExtras\", \"\");  \n          for (let i = 0; i < outboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundExtras` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\")){\n            if(responseData.bookingResult.bookedItems.inboundExtras!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundExtras` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundExtras\");  \n          let inboundExtrasArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundExtras\", \"\");  \n          for (let i = 0; i < inboundExtrasArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'subCode' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"subCode\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].subCode != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].subCode`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundExtras' has 'startTime' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundExtras[i]).to.have.nested.property(\"startTime\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundExtras[i].startTime != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundExtras[${i}].startTime`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.outboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.outboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.outboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.outboundDiscounts\");  \n          let outboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.outboundDiscounts\", \"\");  \n          for (let i = 0; i < outboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.outboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.outboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.outboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n      \n        pm.test('Response has the `bookingResult.bookedItems.inboundDiscounts` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\")){\n            if(responseData.bookingResult.bookedItems.inboundDiscounts!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `bookingResult.bookedItems.inboundDiscounts` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"bookingResult.bookedItems.inboundDiscounts\");  \n          let inboundDiscountsArray = _.get(pm.response.json(), \"bookingResult.bookedItems.inboundDiscounts\", \"\");  \n          for (let i = 0; i < inboundDiscountsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'quantity' as number`,function(){  \n          if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"quantity\")){\n            if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].quantity != null ){\n              pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].quantity`, 200)).to.equal(\"number\");\n            }\n          }   \n        })\n\n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'price' as 'object'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"price\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].price != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].price`, 200)).to.equal(\"object\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'bookedItemReference' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"bookedItemReference\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].bookedItemReference != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].bookedItemReference`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'isAttachment' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"isAttachment\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].isAttachment != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].isAttachment`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'bookingResult.bookedItems.inboundDiscounts' has 'attachmentIsPerPassenger' as 'boolean'`,function(){ \n        if(pm.expect(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i]).to.have.nested.property(\"attachmentIsPerPassenger\")){\n          if(pm.response.json().bookingResult.bookedItems.inboundDiscounts[i].attachmentIsPerPassenger != null){\n            pm.expect(typeof _.get(pm.response.json(),`bookingResult.bookedItems.inboundDiscounts[${i}].attachmentIsPerPassenger`, 200)).to.equal(\"boolean\");\n          }\n        }\n      })\n \n  \n          }\n\n      })\n\n        pm.test('Response has the `timestamp` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"timestamp\")){\n            if(responseData.timestamp!=null){\n              pm.expect(typeof _.get(responseData, \"timestamp\", 200)).to.equal(\"number\");\n            }\n          }\n\n        })\n\n      pm.test('Response has the `packageCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"packageCode\")){\n          if(responseData.packageCode!=null){\n            pm.expect(typeof _.get(responseData, \"packageCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `referralCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"referralCode\")){\n          if(responseData.referralCode!=null){\n            pm.expect(typeof _.get(responseData, \"referralCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `voucherCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"voucherCode\")){\n          if(responseData.voucherCode!=null){\n            pm.expect(typeof _.get(responseData, \"voucherCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookCode` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookCode\")){\n          if(responseData.ticketBookCode!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookCode\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `ticketBookPassword` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"ticketBookPassword\")){\n          if(responseData.ticketBookPassword!=null){\n            pm.expect(typeof _.get(responseData, \"ticketBookPassword\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n      \n        pm.test('Response has the `accommodations` field',function(){\n          const responseData = pm.response.json();\n          if(pm.expect(responseData).to.have.nested.property(\"accommodations\")){\n            if(responseData.accommodations!=null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), \"accommodations\"))).to.equal(true);\n            }\n          }\n\n        })\n          \n\n      pm.test('Each object in the `accommodations` field has all the required fields',function(){         \n          pm.expect(pm.response.json()).to.have.nested.property(\"accommodations\");  \n          let accommodationsArray = _.get(pm.response.json(), \"accommodations\", \"\");  \n          for (let i = 0; i < accommodationsArray.length; i++) {  \n            \t\n      pm.test(`${i} element of array 'accommodations' has 'code' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"code\")){\n          if(pm.response.json().accommodations[i].code != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].code`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'name' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"name\")){\n          if(pm.response.json().accommodations[i].name != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].name`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkinDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkinDate\")){\n          if(pm.response.json().accommodations[i].checkinDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkinDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n      pm.test(`${i} element of array 'accommodations' has 'checkoutDate' as 'string'`,function(){ \n        if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"checkoutDate\")){\n          if(pm.response.json().accommodations[i].checkoutDate != null){\n            pm.expect(typeof _.get(pm.response.json(),`accommodations[${i}].checkoutDate`, 200)).to.equal(\"string\");\n          }\n        }\n      })\n \n\n        pm.test(`${i} element of array 'accommodations' has 'rooms' as an array`,function(){ \n          if(pm.expect(pm.response.json().accommodations[i]).to.have.nested.property(\"rooms\")){\n            if(pm.response.json().accommodations[i].rooms != null){\n              pm.expect(Array.isArray(_.get(pm.response.json(), `accommodations[${i}].rooms`))).to.equal(true);\n            }\n          }\n        })\n\n  \n          }\n\n      })\n\n      pm.test('Response has the `showOnlyTotalPrice` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"showOnlyTotalPrice\")){\n          if(responseData.showOnlyTotalPrice!=null){\n            pm.expect(typeof _.get(responseData, \"showOnlyTotalPrice\", 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n          \n\n      pm.test('Response has the `paymentMethod` field',function(){\n        const responseData = pm.response.json();\n        if(pm.expect(responseData).to.have.nested.property(\"paymentMethod\")){\n          if(responseData.paymentMethod!=null){\n            pm.expect(typeof _.get(responseData, \"paymentMethod\", 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n          \n  \n        pm.expect(_.get(pm.response.json(), \"paymentMethod\", \"\")).to.be.oneOf(CREDIT_CARD,VOUCHER,CLUB_POINTS,TICKET_BOOK);\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Unauthorized\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Forbidden\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Forbidden\");});\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Not Found\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Not Found\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "Authorization"
      },
      {
        "key": "value",
        "value": "{{apiKey}}"
      },
      {
        "key": "in",
        "value": "header"
      }
    ]
  },
  "info": {
    "_postman_id": "6fbae695-8135-4e47-b115-ecc9e451d344",
    "name": "fl-cart-v1",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}